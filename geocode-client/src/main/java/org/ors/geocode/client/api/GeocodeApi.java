/*
 * Openrouteservice
 * This is the openrouteservice API V1 documentation for ORS Core-Version `5.0.0`
 *
 * OpenAPI spec version: 5.0.0
 * Contact: support@openrouteservice.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package org.ors.geocode.client.api;

import org.ors.geocode.client.invoker.ApiCallback;
import org.ors.geocode.client.invoker.ApiClient;
import org.ors.geocode.client.invoker.ApiException;
import org.ors.geocode.client.invoker.ApiResponse;
import org.ors.geocode.client.invoker.Configuration;
import org.ors.geocode.client.invoker.Pair;
import org.ors.geocode.client.invoker.ProgressRequestBody;
import org.ors.geocode.client.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.ors.geocode.client.model.AddressResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class GeocodeApi {
    private ApiClient apiClient;

    public GeocodeApi() {
        this(Configuration.getDefaultApiClient());
    }

    public GeocodeApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for geocodeSearchGet
     * @param apiKey Insert your API Key here.  (required)
     * @param text User&#39;s search string (required)
     * @param focusPointLon Focal point longitude. Ideally a user&#39;s device location, but can also be a focal point. Used to provide results close to the user, while still finding good matches globally. Used in conjunction with &#x60;focus.point.lat&#x60;. Accepts only WGS84 longitutdes. (optional)
     * @param focusPointLat Focal point latitude. Used to provide results close to the user, while still finding good matches globally. Used in conjunction with &#x60;focus.point.lon&#x60;. Accepts only WGS84 latitudes. (optional)
     * @param boundaryRectMinLon  (optional)
     * @param boundaryRectMinLat  (optional)
     * @param boundaryRectMaxLon  (optional)
     * @param boundaryRectMaxLat  (optional)
     * @param boundaryCircleLon circle center longitude (optional)
     * @param boundaryCircleLat circle center latitude (optional)
     * @param boundaryCircleRadius Maximum distance in meters from the centroid to search from. Forms the radius of a bounding circle. (optional)
     * @param boundaryCountry Limits search to only return matches within a specific country. Accepts 2 or 3 letter country codes based on ISO [Alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2#Current_codes) or [Alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2#Current_codes) abbreviations.  (optional)
     * @param sources source filter (optional)
     * @param layers For more than one layer, accepts a comma separated list of valid layers. If any of those layers is invalid, the request will still be honored, but a warning will be thrown in the &#x60;geocoding&#x60; block of the response.  (optional)
     * @param size Maximum number of possible matching places to be returned (optional, default to 10)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call geocodeSearchGetCall(String apiKey, String text, Float focusPointLon, Float focusPointLat, Float boundaryRectMinLon, Float boundaryRectMinLat, Float boundaryRectMaxLon, Float boundaryRectMaxLat, Float boundaryCircleLon, Float boundaryCircleLat, Float boundaryCircleRadius, String boundaryCountry, List<String> sources, List<String> layers, Integer size, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/geocode/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (apiKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("api_key", apiKey));
        if (text != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("text", text));
        if (focusPointLon != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("focus.point.lon", focusPointLon));
        if (focusPointLat != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("focus.point.lat", focusPointLat));
        if (boundaryRectMinLon != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("boundary.rect.min_lon", boundaryRectMinLon));
        if (boundaryRectMinLat != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("boundary.rect.min_lat", boundaryRectMinLat));
        if (boundaryRectMaxLon != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("boundary.rect.max_lon", boundaryRectMaxLon));
        if (boundaryRectMaxLat != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("boundary.rect.max_lat", boundaryRectMaxLat));
        if (boundaryCircleLon != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("boundary.circle.lon", boundaryCircleLon));
        if (boundaryCircleLat != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("boundary.circle.lat", boundaryCircleLat));
        if (boundaryCircleRadius != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("boundary.circle.radius", boundaryCircleRadius));
        if (boundaryCountry != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("boundary.country", boundaryCountry));
        if (sources != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "sources", sources));
        if (layers != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "layers", layers));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.geo+json", "application/json; charset=utf-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key-Parameter" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call geocodeSearchGetValidateBeforeCall(String apiKey, String text, Float focusPointLon, Float focusPointLat, Float boundaryRectMinLon, Float boundaryRectMinLat, Float boundaryRectMaxLon, Float boundaryRectMaxLat, Float boundaryCircleLon, Float boundaryCircleLat, Float boundaryCircleRadius, String boundaryCountry, List<String> sources, List<String> layers, Integer size, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling geocodeSearchGet(Async)");
        }
        
        // verify the required parameter 'text' is set
        if (text == null) {
            throw new ApiException("Missing the required parameter 'text' when calling geocodeSearchGet(Async)");
        }
        

        com.squareup.okhttp.Call call = geocodeSearchGetCall(apiKey, text, focusPointLon, focusPointLat, boundaryRectMinLon, boundaryRectMinLat, boundaryRectMaxLon, boundaryRectMaxLat, boundaryCircleLon, boundaryCircleLat, boundaryCircleRadius, boundaryCountry, sources, layers, size, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Forward Geocode Service
     * Returns a JSON formatted list of objects corresponding to the search input. &#x60;boundary.*&#x60;-parameters can be combined if they are overlapping. **The interactivity for this enpoint is experimental!** [Please refer to this external Documentation](https://github.com/pelias/documentation/blob/master/search.md#search-the-world) 
     * @param apiKey Insert your API Key here.  (required)
     * @param text User&#39;s search string (required)
     * @param focusPointLon Focal point longitude. Ideally a user&#39;s device location, but can also be a focal point. Used to provide results close to the user, while still finding good matches globally. Used in conjunction with &#x60;focus.point.lat&#x60;. Accepts only WGS84 longitutdes. (optional)
     * @param focusPointLat Focal point latitude. Used to provide results close to the user, while still finding good matches globally. Used in conjunction with &#x60;focus.point.lon&#x60;. Accepts only WGS84 latitudes. (optional)
     * @param boundaryRectMinLon  (optional)
     * @param boundaryRectMinLat  (optional)
     * @param boundaryRectMaxLon  (optional)
     * @param boundaryRectMaxLat  (optional)
     * @param boundaryCircleLon circle center longitude (optional)
     * @param boundaryCircleLat circle center latitude (optional)
     * @param boundaryCircleRadius Maximum distance in meters from the centroid to search from. Forms the radius of a bounding circle. (optional)
     * @param boundaryCountry Limits search to only return matches within a specific country. Accepts 2 or 3 letter country codes based on ISO [Alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2#Current_codes) or [Alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2#Current_codes) abbreviations.  (optional)
     * @param sources source filter (optional)
     * @param layers For more than one layer, accepts a comma separated list of valid layers. If any of those layers is invalid, the request will still be honored, but a warning will be thrown in the &#x60;geocoding&#x60; block of the response.  (optional)
     * @param size Maximum number of possible matching places to be returned (optional, default to 10)
     * @return AddressResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AddressResponse geocodeSearchGet(String apiKey, String text, Float focusPointLon, Float focusPointLat, Float boundaryRectMinLon, Float boundaryRectMinLat, Float boundaryRectMaxLon, Float boundaryRectMaxLat, Float boundaryCircleLon, Float boundaryCircleLat, Float boundaryCircleRadius, String boundaryCountry, List<String> sources, List<String> layers, Integer size) throws ApiException {
        ApiResponse<AddressResponse> resp = geocodeSearchGetWithHttpInfo(apiKey, text, focusPointLon, focusPointLat, boundaryRectMinLon, boundaryRectMinLat, boundaryRectMaxLon, boundaryRectMaxLat, boundaryCircleLon, boundaryCircleLat, boundaryCircleRadius, boundaryCountry, sources, layers, size);
        return resp.getData();
    }

    /**
     * Forward Geocode Service
     * Returns a JSON formatted list of objects corresponding to the search input. &#x60;boundary.*&#x60;-parameters can be combined if they are overlapping. **The interactivity for this enpoint is experimental!** [Please refer to this external Documentation](https://github.com/pelias/documentation/blob/master/search.md#search-the-world) 
     * @param apiKey Insert your API Key here.  (required)
     * @param text User&#39;s search string (required)
     * @param focusPointLon Focal point longitude. Ideally a user&#39;s device location, but can also be a focal point. Used to provide results close to the user, while still finding good matches globally. Used in conjunction with &#x60;focus.point.lat&#x60;. Accepts only WGS84 longitutdes. (optional)
     * @param focusPointLat Focal point latitude. Used to provide results close to the user, while still finding good matches globally. Used in conjunction with &#x60;focus.point.lon&#x60;. Accepts only WGS84 latitudes. (optional)
     * @param boundaryRectMinLon  (optional)
     * @param boundaryRectMinLat  (optional)
     * @param boundaryRectMaxLon  (optional)
     * @param boundaryRectMaxLat  (optional)
     * @param boundaryCircleLon circle center longitude (optional)
     * @param boundaryCircleLat circle center latitude (optional)
     * @param boundaryCircleRadius Maximum distance in meters from the centroid to search from. Forms the radius of a bounding circle. (optional)
     * @param boundaryCountry Limits search to only return matches within a specific country. Accepts 2 or 3 letter country codes based on ISO [Alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2#Current_codes) or [Alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2#Current_codes) abbreviations.  (optional)
     * @param sources source filter (optional)
     * @param layers For more than one layer, accepts a comma separated list of valid layers. If any of those layers is invalid, the request will still be honored, but a warning will be thrown in the &#x60;geocoding&#x60; block of the response.  (optional)
     * @param size Maximum number of possible matching places to be returned (optional, default to 10)
     * @return ApiResponse&lt;AddressResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AddressResponse> geocodeSearchGetWithHttpInfo(String apiKey, String text, Float focusPointLon, Float focusPointLat, Float boundaryRectMinLon, Float boundaryRectMinLat, Float boundaryRectMaxLon, Float boundaryRectMaxLat, Float boundaryCircleLon, Float boundaryCircleLat, Float boundaryCircleRadius, String boundaryCountry, List<String> sources, List<String> layers, Integer size) throws ApiException {
        com.squareup.okhttp.Call call = geocodeSearchGetValidateBeforeCall(apiKey, text, focusPointLon, focusPointLat, boundaryRectMinLon, boundaryRectMinLat, boundaryRectMaxLon, boundaryRectMaxLat, boundaryCircleLon, boundaryCircleLat, boundaryCircleRadius, boundaryCountry, sources, layers, size, null, null);
        Type localVarReturnType = new TypeToken<AddressResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Forward Geocode Service (asynchronously)
     * Returns a JSON formatted list of objects corresponding to the search input. &#x60;boundary.*&#x60;-parameters can be combined if they are overlapping. **The interactivity for this enpoint is experimental!** [Please refer to this external Documentation](https://github.com/pelias/documentation/blob/master/search.md#search-the-world) 
     * @param apiKey Insert your API Key here.  (required)
     * @param text User&#39;s search string (required)
     * @param focusPointLon Focal point longitude. Ideally a user&#39;s device location, but can also be a focal point. Used to provide results close to the user, while still finding good matches globally. Used in conjunction with &#x60;focus.point.lat&#x60;. Accepts only WGS84 longitutdes. (optional)
     * @param focusPointLat Focal point latitude. Used to provide results close to the user, while still finding good matches globally. Used in conjunction with &#x60;focus.point.lon&#x60;. Accepts only WGS84 latitudes. (optional)
     * @param boundaryRectMinLon  (optional)
     * @param boundaryRectMinLat  (optional)
     * @param boundaryRectMaxLon  (optional)
     * @param boundaryRectMaxLat  (optional)
     * @param boundaryCircleLon circle center longitude (optional)
     * @param boundaryCircleLat circle center latitude (optional)
     * @param boundaryCircleRadius Maximum distance in meters from the centroid to search from. Forms the radius of a bounding circle. (optional)
     * @param boundaryCountry Limits search to only return matches within a specific country. Accepts 2 or 3 letter country codes based on ISO [Alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2#Current_codes) or [Alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2#Current_codes) abbreviations.  (optional)
     * @param sources source filter (optional)
     * @param layers For more than one layer, accepts a comma separated list of valid layers. If any of those layers is invalid, the request will still be honored, but a warning will be thrown in the &#x60;geocoding&#x60; block of the response.  (optional)
     * @param size Maximum number of possible matching places to be returned (optional, default to 10)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call geocodeSearchGetAsync(String apiKey, String text, Float focusPointLon, Float focusPointLat, Float boundaryRectMinLon, Float boundaryRectMinLat, Float boundaryRectMaxLon, Float boundaryRectMaxLat, Float boundaryCircleLon, Float boundaryCircleLat, Float boundaryCircleRadius, String boundaryCountry, List<String> sources, List<String> layers, Integer size, final ApiCallback<AddressResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = geocodeSearchGetValidateBeforeCall(apiKey, text, focusPointLon, focusPointLat, boundaryRectMinLon, boundaryRectMinLat, boundaryRectMaxLon, boundaryRectMaxLat, boundaryCircleLon, boundaryCircleLat, boundaryCircleRadius, boundaryCountry, sources, layers, size, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AddressResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
