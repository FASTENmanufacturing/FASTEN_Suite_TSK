/*
 * FPSOT OAS
 * Open API Specification REST for FPSOT - FASTEN Predictive Simulator-Optimizer Tool
 *
 * OpenAPI spec version: 0.0.1-SNAPSHOT
 * Contact: Fasten-wp4@lists.inesctec.pt
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.fasten.wp4.fpsot.client.api;

import com.fasten.wp4.fpsot.client.invoker.ApiCallback;
import com.fasten.wp4.fpsot.client.invoker.ApiClient;
import com.fasten.wp4.fpsot.client.invoker.ApiException;
import com.fasten.wp4.fpsot.client.invoker.ApiResponse;
import com.fasten.wp4.fpsot.client.invoker.Configuration;
import com.fasten.wp4.fpsot.client.invoker.Pair;
import com.fasten.wp4.fpsot.client.invoker.ProgressRequestBody;
import com.fasten.wp4.fpsot.client.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.fasten.wp4.fpsot.client.model.AllocationResult;
import com.fasten.wp4.fpsot.client.model.Demand;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class HsoControllerApi {
    private ApiClient apiClient;

    public HsoControllerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public HsoControllerApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for execute
     * @param demand demand (required)
     * @param forwardToFastenGateway If this request must be forwarded to Fasten Gateway (optional, default to false)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call executeCall(Demand demand, Boolean forwardToFastenGateway, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = demand;

        // create path and map variables
        String localVarPath = "/operationalOptimization/demand";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (forwardToFastenGateway != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("forwardToFastenGateway", forwardToFastenGateway));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call executeValidateBeforeCall(Demand demand, Boolean forwardToFastenGateway, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'demand' is set
        if (demand == null) {
            throw new ApiException("Missing the required parameter 'demand' when calling execute(Async)");
        }
        

        com.squareup.okhttp.Call call = executeCall(demand, forwardToFastenGateway, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Configures and execute a operational optimization
     * Also returns the url to created data in header location 
     * @param demand demand (required)
     * @param forwardToFastenGateway If this request must be forwarded to Fasten Gateway (optional, default to false)
     * @return AllocationResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AllocationResult execute(Demand demand, Boolean forwardToFastenGateway) throws ApiException {
        ApiResponse<AllocationResult> resp = executeWithHttpInfo(demand, forwardToFastenGateway);
        return resp.getData();
    }

    /**
     * Configures and execute a operational optimization
     * Also returns the url to created data in header location 
     * @param demand demand (required)
     * @param forwardToFastenGateway If this request must be forwarded to Fasten Gateway (optional, default to false)
     * @return ApiResponse&lt;AllocationResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AllocationResult> executeWithHttpInfo(Demand demand, Boolean forwardToFastenGateway) throws ApiException {
        com.squareup.okhttp.Call call = executeValidateBeforeCall(demand, forwardToFastenGateway, null, null);
        Type localVarReturnType = new TypeToken<AllocationResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Configures and execute a operational optimization (asynchronously)
     * Also returns the url to created data in header location 
     * @param demand demand (required)
     * @param forwardToFastenGateway If this request must be forwarded to Fasten Gateway (optional, default to false)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call executeAsync(Demand demand, Boolean forwardToFastenGateway, final ApiCallback<AllocationResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = executeValidateBeforeCall(demand, forwardToFastenGateway, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AllocationResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for executeOperationalOptimization
     * @param forwardToFastenGateway If this request must be forwarded to Fasten Gateway (optional, default to false)
     * @param orderID Production Order Indentification (optional)
     * @param origin The delivery location (optional)
     * @param part The type of spare part (ex.: Button, Dosing chamber, Grid Air Condition, Support for escalator, Home Lift frame) (optional)
     * @param quantity The quantity to be allocate (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call executeOperationalOptimizationCall(Boolean forwardToFastenGateway, String orderID, String origin, String part, String quantity, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/operationalOptimization";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (forwardToFastenGateway != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("forwardToFastenGateway", forwardToFastenGateway));
        if (orderID != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orderID", orderID));
        if (origin != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("origin", origin));
        if (part != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("part", part));
        if (quantity != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("quantity", quantity));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call executeOperationalOptimizationValidateBeforeCall(Boolean forwardToFastenGateway, String orderID, String origin, String part, String quantity, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = executeOperationalOptimizationCall(forwardToFastenGateway, orderID, origin, part, quantity, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Configures and execute a operational optimization
     * Also returns the url to created data in header location 
     * @param forwardToFastenGateway If this request must be forwarded to Fasten Gateway (optional, default to false)
     * @param orderID Production Order Indentification (optional)
     * @param origin The delivery location (optional)
     * @param part The type of spare part (ex.: Button, Dosing chamber, Grid Air Condition, Support for escalator, Home Lift frame) (optional)
     * @param quantity The quantity to be allocate (optional)
     * @return AllocationResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AllocationResult executeOperationalOptimization(Boolean forwardToFastenGateway, String orderID, String origin, String part, String quantity) throws ApiException {
        ApiResponse<AllocationResult> resp = executeOperationalOptimizationWithHttpInfo(forwardToFastenGateway, orderID, origin, part, quantity);
        return resp.getData();
    }

    /**
     * Configures and execute a operational optimization
     * Also returns the url to created data in header location 
     * @param forwardToFastenGateway If this request must be forwarded to Fasten Gateway (optional, default to false)
     * @param orderID Production Order Indentification (optional)
     * @param origin The delivery location (optional)
     * @param part The type of spare part (ex.: Button, Dosing chamber, Grid Air Condition, Support for escalator, Home Lift frame) (optional)
     * @param quantity The quantity to be allocate (optional)
     * @return ApiResponse&lt;AllocationResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AllocationResult> executeOperationalOptimizationWithHttpInfo(Boolean forwardToFastenGateway, String orderID, String origin, String part, String quantity) throws ApiException {
        com.squareup.okhttp.Call call = executeOperationalOptimizationValidateBeforeCall(forwardToFastenGateway, orderID, origin, part, quantity, null, null);
        Type localVarReturnType = new TypeToken<AllocationResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Configures and execute a operational optimization (asynchronously)
     * Also returns the url to created data in header location 
     * @param forwardToFastenGateway If this request must be forwarded to Fasten Gateway (optional, default to false)
     * @param orderID Production Order Indentification (optional)
     * @param origin The delivery location (optional)
     * @param part The type of spare part (ex.: Button, Dosing chamber, Grid Air Condition, Support for escalator, Home Lift frame) (optional)
     * @param quantity The quantity to be allocate (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call executeOperationalOptimizationAsync(Boolean forwardToFastenGateway, String orderID, String origin, String part, String quantity, final ApiCallback<AllocationResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = executeOperationalOptimizationValidateBeforeCall(forwardToFastenGateway, orderID, origin, part, quantity, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AllocationResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
