/*
 * Database OAS
 * Open API Specification REST for FASTEN Holistic Simulator-Optimizer Tool
 *
 * OpenAPI spec version: 0.0.1-SNAPSHOT
 * Contact: Fasten-wp4@lists.inesctec.pt
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.fasten.wp4.database.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;
import java.io.Serializable;

/**
 * The optimizator input data
 */
@ApiModel(description = "The optimizator input data")

public class Optimizator implements Serializable {
  private static final long serialVersionUID = 1L;

  @SerializedName("annualFixedCost")
  private BigDecimal annualFixedCost = null;

  @SerializedName("id")
  private Long id = null;

  @SerializedName("leadTimeLimit")
  private Double leadTimeLimit = null;

  @SerializedName("numberOfSRAMs")
  private Integer numberOfSRAMs = null;

  public Optimizator annualFixedCost(BigDecimal annualFixedCost) {
    this.annualFixedCost = annualFixedCost;
    return this;
  }

   /**
   * The annual fixed cost in Monetary
   * @return annualFixedCost
  **/
  @ApiModelProperty(value = "The annual fixed cost in Monetary")
  public BigDecimal getAnnualFixedCost() {
    return annualFixedCost;
  }

  public void setAnnualFixedCost(BigDecimal annualFixedCost) {
    this.annualFixedCost = annualFixedCost;
  }

  public Optimizator id(Long id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @ApiModelProperty(value = "")
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }

  public Optimizator leadTimeLimit(Double leadTimeLimit) {
    this.leadTimeLimit = leadTimeLimit;
    return this;
  }

   /**
   * maximum lead time (in hours) to a remote station produce and deliver the spare part
   * @return leadTimeLimit
  **/
  @ApiModelProperty(value = "maximum lead time (in hours) to a remote station produce and deliver the spare part")
  public Double getLeadTimeLimit() {
    return leadTimeLimit;
  }

  public void setLeadTimeLimit(Double leadTimeLimit) {
    this.leadTimeLimit = leadTimeLimit;
  }

  public Optimizator numberOfSRAMs(Integer numberOfSRAMs) {
    this.numberOfSRAMs = numberOfSRAMs;
    return this;
  }

   /**
   * Maximum SRAMs into a Remote Station
   * @return numberOfSRAMs
  **/
  @ApiModelProperty(value = "Maximum SRAMs into a Remote Station")
  public Integer getNumberOfSRAMs() {
    return numberOfSRAMs;
  }

  public void setNumberOfSRAMs(Integer numberOfSRAMs) {
    this.numberOfSRAMs = numberOfSRAMs;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Optimizator optimizator = (Optimizator) o;
    return Objects.equals(this.annualFixedCost, optimizator.annualFixedCost) &&
        Objects.equals(this.id, optimizator.id) &&
        Objects.equals(this.leadTimeLimit, optimizator.leadTimeLimit) &&
        Objects.equals(this.numberOfSRAMs, optimizator.numberOfSRAMs);
  }

  @Override
  public int hashCode() {
    return Objects.hash(annualFixedCost, id, leadTimeLimit, numberOfSRAMs);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Optimizator {\n");
    
    sb.append("    annualFixedCost: ").append(toIndentedString(annualFixedCost)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    leadTimeLimit: ").append(toIndentedString(leadTimeLimit)).append("\n");
    sb.append("    numberOfSRAMs: ").append(toIndentedString(numberOfSRAMs)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

