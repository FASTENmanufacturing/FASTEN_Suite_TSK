/*
 * Database OAS
 * Open API Specification REST for FASTEN Holistic Simulator-Optimizer Tool
 *
 * OpenAPI spec version: 0.0.1-SNAPSHOT
 * Contact: Fasten-wp4@lists.inesctec.pt
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.fasten.wp4.database.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasten.wp4.database.client.model.RemoteStation;
import com.fasten.wp4.database.client.model.SRAMCapabilities;
import com.fasten.wp4.database.client.model.SRAMEnviromentalInfo;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.io.Serializable;

/**
 * Details about SRAM. 
 */
@ApiModel(description = "Details about SRAM. ")

public class SRAM implements Serializable {
  private static final long serialVersionUID = 1L;

  @SerializedName("capabilities")
  private SRAMCapabilities capabilities = null;

  @SerializedName("code")
  private String code = null;

  @SerializedName("enviromentalInfo")
  private SRAMEnviromentalInfo enviromentalInfo = null;

  @SerializedName("id")
  private Long id = null;

  @SerializedName("printTime")
  private Double printTime = null;

  @SerializedName("printTimeLeft")
  private Double printTimeLeft = null;

  @SerializedName("printTimeLeftOrigin")
  private String printTimeLeftOrigin = null;

  /**
   * Gets or Sets processStatus
   */
  @JsonAdapter(ProcessStatusEnum.Adapter.class)
  public enum ProcessStatusEnum {
    NO_INFO("No info"),
    
    NOT_READY("Not ready"),
    
    IN_OPERATION("In Operation"),
    
    ERROR("Error"),
    
    STANDBY("Standby");

    private String value;

    ProcessStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProcessStatusEnum fromValue(String text) {
      for (ProcessStatusEnum b : ProcessStatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<ProcessStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProcessStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProcessStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ProcessStatusEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("processStatus")
  private ProcessStatusEnum processStatus = null;

  @SerializedName("progressCompletion")
  private Double progressCompletion = null;

  @SerializedName("remoteStation")
  private RemoteStation remoteStation = null;

  /**
   * Gets or Sets status
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    ONLINE("Online"),
    
    OFFLINE("Offline");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String text) {
      for (StatusEnum b : StatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return StatusEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("status")
  private StatusEnum status = null;

  public SRAM capabilities(SRAMCapabilities capabilities) {
    this.capabilities = capabilities;
    return this;
  }

   /**
   * Get capabilities
   * @return capabilities
  **/
  @ApiModelProperty(value = "")
  public SRAMCapabilities getCapabilities() {
    return capabilities;
  }

  public void setCapabilities(SRAMCapabilities capabilities) {
    this.capabilities = capabilities;
  }

  public SRAM code(String code) {
    this.code = code;
    return this;
  }

   /**
   * Get code
   * @return code
  **/
  @ApiModelProperty(value = "")
  public String getCode() {
    return code;
  }

  public void setCode(String code) {
    this.code = code;
  }

  public SRAM enviromentalInfo(SRAMEnviromentalInfo enviromentalInfo) {
    this.enviromentalInfo = enviromentalInfo;
    return this;
  }

   /**
   * Get enviromentalInfo
   * @return enviromentalInfo
  **/
  @ApiModelProperty(value = "")
  public SRAMEnviromentalInfo getEnviromentalInfo() {
    return enviromentalInfo;
  }

  public void setEnviromentalInfo(SRAMEnviromentalInfo enviromentalInfo) {
    this.enviromentalInfo = enviromentalInfo;
  }

  public SRAM id(Long id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @ApiModelProperty(value = "")
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }

  public SRAM printTime(Double printTime) {
    this.printTime = printTime;
    return this;
  }

   /**
   * Get printTime
   * @return printTime
  **/
  @ApiModelProperty(value = "")
  public Double getPrintTime() {
    return printTime;
  }

  public void setPrintTime(Double printTime) {
    this.printTime = printTime;
  }

  public SRAM printTimeLeft(Double printTimeLeft) {
    this.printTimeLeft = printTimeLeft;
    return this;
  }

   /**
   * Get printTimeLeft
   * @return printTimeLeft
  **/
  @ApiModelProperty(value = "")
  public Double getPrintTimeLeft() {
    return printTimeLeft;
  }

  public void setPrintTimeLeft(Double printTimeLeft) {
    this.printTimeLeft = printTimeLeft;
  }

  public SRAM printTimeLeftOrigin(String printTimeLeftOrigin) {
    this.printTimeLeftOrigin = printTimeLeftOrigin;
    return this;
  }

   /**
   * Get printTimeLeftOrigin
   * @return printTimeLeftOrigin
  **/
  @ApiModelProperty(value = "")
  public String getPrintTimeLeftOrigin() {
    return printTimeLeftOrigin;
  }

  public void setPrintTimeLeftOrigin(String printTimeLeftOrigin) {
    this.printTimeLeftOrigin = printTimeLeftOrigin;
  }

  public SRAM processStatus(ProcessStatusEnum processStatus) {
    this.processStatus = processStatus;
    return this;
  }

   /**
   * Get processStatus
   * @return processStatus
  **/
  @ApiModelProperty(value = "")
  public ProcessStatusEnum getProcessStatus() {
    return processStatus;
  }

  public void setProcessStatus(ProcessStatusEnum processStatus) {
    this.processStatus = processStatus;
  }

  public SRAM progressCompletion(Double progressCompletion) {
    this.progressCompletion = progressCompletion;
    return this;
  }

   /**
   * Get progressCompletion
   * @return progressCompletion
  **/
  @ApiModelProperty(value = "")
  public Double getProgressCompletion() {
    return progressCompletion;
  }

  public void setProgressCompletion(Double progressCompletion) {
    this.progressCompletion = progressCompletion;
  }

  public SRAM remoteStation(RemoteStation remoteStation) {
    this.remoteStation = remoteStation;
    return this;
  }

   /**
   * Get remoteStation
   * @return remoteStation
  **/
  @ApiModelProperty(value = "")
  public RemoteStation getRemoteStation() {
    return remoteStation;
  }

  public void setRemoteStation(RemoteStation remoteStation) {
    this.remoteStation = remoteStation;
  }

  public SRAM status(StatusEnum status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @ApiModelProperty(value = "")
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SRAM SRAM = (SRAM) o;
    return Objects.equals(this.capabilities, SRAM.capabilities) &&
        Objects.equals(this.code, SRAM.code) &&
        Objects.equals(this.enviromentalInfo, SRAM.enviromentalInfo) &&
        Objects.equals(this.id, SRAM.id) &&
        Objects.equals(this.printTime, SRAM.printTime) &&
        Objects.equals(this.printTimeLeft, SRAM.printTimeLeft) &&
        Objects.equals(this.printTimeLeftOrigin, SRAM.printTimeLeftOrigin) &&
        Objects.equals(this.processStatus, SRAM.processStatus) &&
        Objects.equals(this.progressCompletion, SRAM.progressCompletion) &&
        Objects.equals(this.remoteStation, SRAM.remoteStation) &&
        Objects.equals(this.status, SRAM.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(capabilities, code, enviromentalInfo, id, printTime, printTimeLeft, printTimeLeftOrigin, processStatus, progressCompletion, remoteStation, status);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SRAM {\n");
    
    sb.append("    capabilities: ").append(toIndentedString(capabilities)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    enviromentalInfo: ").append(toIndentedString(enviromentalInfo)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    printTime: ").append(toIndentedString(printTime)).append("\n");
    sb.append("    printTimeLeft: ").append(toIndentedString(printTimeLeft)).append("\n");
    sb.append("    printTimeLeftOrigin: ").append(toIndentedString(printTimeLeftOrigin)).append("\n");
    sb.append("    processStatus: ").append(toIndentedString(processStatus)).append("\n");
    sb.append("    progressCompletion: ").append(toIndentedString(progressCompletion)).append("\n");
    sb.append("    remoteStation: ").append(toIndentedString(remoteStation)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

