/*
 * Database OAS
 * Open API Specification REST for FASTEN Holistic Simulator-Optimizer Tool
 *
 * OpenAPI spec version: 0.0.1-SNAPSHOT
 * Contact: Fasten-wp4@lists.inesctec.pt
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.fasten.wp4.database.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasten.wp4.database.client.model.Part;
import com.fasten.wp4.database.client.model.SRAM;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;
import java.io.Serializable;

/**
 * Details about producing the part.
 */
@ApiModel(description = "Details about producing the part.")

public class ProcessingPart implements Serializable {
  private static final long serialVersionUID = 1L;

  @SerializedName("avgProducingTime")
  private Double avgProducingTime = null;

  @SerializedName("avgSetupTime")
  private Double avgSetupTime = null;

  @SerializedName("cost")
  private BigDecimal cost = null;

  @SerializedName("id")
  private Long id = null;

  @SerializedName("part")
  private Part part = null;

  @SerializedName("sram")
  private SRAM sram = null;

  @SerializedName("stdProducingTime")
  private Double stdProducingTime = null;

  @SerializedName("stdSetupTime")
  private Double stdSetupTime = null;

  public ProcessingPart avgProducingTime(Double avgProducingTime) {
    this.avgProducingTime = avgProducingTime;
    return this;
  }

   /**
   * The avarage time to produce the part (seconds)
   * @return avgProducingTime
  **/
  @ApiModelProperty(value = "The avarage time to produce the part (seconds)")
  public Double getAvgProducingTime() {
    return avgProducingTime;
  }

  public void setAvgProducingTime(Double avgProducingTime) {
    this.avgProducingTime = avgProducingTime;
  }

  public ProcessingPart avgSetupTime(Double avgSetupTime) {
    this.avgSetupTime = avgSetupTime;
    return this;
  }

   /**
   * The avarage time to setup the SRAM (seconds)
   * @return avgSetupTime
  **/
  @ApiModelProperty(value = "The avarage time to setup the SRAM (seconds)")
  public Double getAvgSetupTime() {
    return avgSetupTime;
  }

  public void setAvgSetupTime(Double avgSetupTime) {
    this.avgSetupTime = avgSetupTime;
  }

  public ProcessingPart cost(BigDecimal cost) {
    this.cost = cost;
    return this;
  }

   /**
   * The cost to produce this part in that SRAM (currency)
   * @return cost
  **/
  @ApiModelProperty(value = "The cost to produce this part in that SRAM (currency)")
  public BigDecimal getCost() {
    return cost;
  }

  public void setCost(BigDecimal cost) {
    this.cost = cost;
  }

  public ProcessingPart id(Long id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @ApiModelProperty(value = "")
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }

  public ProcessingPart part(Part part) {
    this.part = part;
    return this;
  }

   /**
   * The part
   * @return part
  **/
  @ApiModelProperty(value = "The part")
  public Part getPart() {
    return part;
  }

  public void setPart(Part part) {
    this.part = part;
  }

  public ProcessingPart sram(SRAM sram) {
    this.sram = sram;
    return this;
  }

   /**
   * Get sram
   * @return sram
  **/
  @ApiModelProperty(value = "")
  public SRAM getSram() {
    return sram;
  }

  public void setSram(SRAM sram) {
    this.sram = sram;
  }

  public ProcessingPart stdProducingTime(Double stdProducingTime) {
    this.stdProducingTime = stdProducingTime;
    return this;
  }

   /**
   * The standard deviation time to produce the part (seconds)
   * @return stdProducingTime
  **/
  @ApiModelProperty(value = "The standard deviation time to produce the part (seconds)")
  public Double getStdProducingTime() {
    return stdProducingTime;
  }

  public void setStdProducingTime(Double stdProducingTime) {
    this.stdProducingTime = stdProducingTime;
  }

  public ProcessingPart stdSetupTime(Double stdSetupTime) {
    this.stdSetupTime = stdSetupTime;
    return this;
  }

   /**
   * The standard deviation time to setup the SRAM (seconds)
   * @return stdSetupTime
  **/
  @ApiModelProperty(value = "The standard deviation time to setup the SRAM (seconds)")
  public Double getStdSetupTime() {
    return stdSetupTime;
  }

  public void setStdSetupTime(Double stdSetupTime) {
    this.stdSetupTime = stdSetupTime;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProcessingPart processingPart = (ProcessingPart) o;
    return Objects.equals(this.avgProducingTime, processingPart.avgProducingTime) &&
        Objects.equals(this.avgSetupTime, processingPart.avgSetupTime) &&
        Objects.equals(this.cost, processingPart.cost) &&
        Objects.equals(this.id, processingPart.id) &&
        Objects.equals(this.part, processingPart.part) &&
        Objects.equals(this.sram, processingPart.sram) &&
        Objects.equals(this.stdProducingTime, processingPart.stdProducingTime) &&
        Objects.equals(this.stdSetupTime, processingPart.stdSetupTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(avgProducingTime, avgSetupTime, cost, id, part, sram, stdProducingTime, stdSetupTime);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProcessingPart {\n");
    
    sb.append("    avgProducingTime: ").append(toIndentedString(avgProducingTime)).append("\n");
    sb.append("    avgSetupTime: ").append(toIndentedString(avgSetupTime)).append("\n");
    sb.append("    cost: ").append(toIndentedString(cost)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    part: ").append(toIndentedString(part)).append("\n");
    sb.append("    sram: ").append(toIndentedString(sram)).append("\n");
    sb.append("    stdProducingTime: ").append(toIndentedString(stdProducingTime)).append("\n");
    sb.append("    stdSetupTime: ").append(toIndentedString(stdSetupTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

