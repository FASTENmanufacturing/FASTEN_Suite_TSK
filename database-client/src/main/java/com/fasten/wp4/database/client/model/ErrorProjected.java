/*
 * Database OAS
 * Open API Specification REST for FASTEN Holistic Simulator-Optimizer Tool
 *
 * OpenAPI spec version: 0.0.1-SNAPSHOT
 * Contact: Fasten-wp4@lists.inesctec.pt
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.fasten.wp4.database.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;
import java.io.Serializable;

/**
 * ErrorProjected
 */

public class ErrorProjected implements Serializable {
  private static final long serialVersionUID = 1L;

  /**
   * Gets or Sets errorMethod
   */
  @JsonAdapter(ErrorMethodEnum.Adapter.class)
  public enum ErrorMethodEnum {
    RMSE("RMSE"),
    
    MAPE("MAPE"),
    
    MASE("MASE");

    private String value;

    ErrorMethodEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ErrorMethodEnum fromValue(String text) {
      for (ErrorMethodEnum b : ErrorMethodEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<ErrorMethodEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ErrorMethodEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ErrorMethodEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ErrorMethodEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("errorMethod")
  private ErrorMethodEnum errorMethod = null;

  /**
   * Gets or Sets errorSubtype
   */
  @JsonAdapter(ErrorSubtypeEnum.Adapter.class)
  public enum ErrorSubtypeEnum {
    NAIVE("NAIVE"),
    
    SES("SES"),
    
    AR("AR"),
    
    HOLT("HOLT"),
    
    CF1("CF1"),
    
    CR("CR"),
    
    ANN("ANN"),
    
    ELM("ELM");

    private String value;

    ErrorSubtypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ErrorSubtypeEnum fromValue(String text) {
      for (ErrorSubtypeEnum b : ErrorSubtypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<ErrorSubtypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ErrorSubtypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ErrorSubtypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ErrorSubtypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("errorSubtype")
  private ErrorSubtypeEnum errorSubtype = null;

  /**
   * Gets or Sets errorType
   */
  @JsonAdapter(ErrorTypeEnum.Adapter.class)
  public enum ErrorTypeEnum {
    TRAIN("Train"),
    
    TEST("Test");

    private String value;

    ErrorTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ErrorTypeEnum fromValue(String text) {
      for (ErrorTypeEnum b : ErrorTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<ErrorTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ErrorTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ErrorTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ErrorTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("errorType")
  private ErrorTypeEnum errorType = null;

  @SerializedName("id")
  private Long id = null;

  @SerializedName("value")
  private BigDecimal value = null;

  public ErrorProjected errorMethod(ErrorMethodEnum errorMethod) {
    this.errorMethod = errorMethod;
    return this;
  }

   /**
   * Get errorMethod
   * @return errorMethod
  **/
  @ApiModelProperty(value = "")
  public ErrorMethodEnum getErrorMethod() {
    return errorMethod;
  }

  public void setErrorMethod(ErrorMethodEnum errorMethod) {
    this.errorMethod = errorMethod;
  }

  public ErrorProjected errorSubtype(ErrorSubtypeEnum errorSubtype) {
    this.errorSubtype = errorSubtype;
    return this;
  }

   /**
   * Get errorSubtype
   * @return errorSubtype
  **/
  @ApiModelProperty(value = "")
  public ErrorSubtypeEnum getErrorSubtype() {
    return errorSubtype;
  }

  public void setErrorSubtype(ErrorSubtypeEnum errorSubtype) {
    this.errorSubtype = errorSubtype;
  }

  public ErrorProjected errorType(ErrorTypeEnum errorType) {
    this.errorType = errorType;
    return this;
  }

   /**
   * Get errorType
   * @return errorType
  **/
  @ApiModelProperty(value = "")
  public ErrorTypeEnum getErrorType() {
    return errorType;
  }

  public void setErrorType(ErrorTypeEnum errorType) {
    this.errorType = errorType;
  }

  public ErrorProjected id(Long id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @ApiModelProperty(value = "")
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }

  public ErrorProjected value(BigDecimal value) {
    this.value = value;
    return this;
  }

   /**
   * Get value
   * @return value
  **/
  @ApiModelProperty(value = "")
  public BigDecimal getValue() {
    return value;
  }

  public void setValue(BigDecimal value) {
    this.value = value;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ErrorProjected errorProjected = (ErrorProjected) o;
    return Objects.equals(this.errorMethod, errorProjected.errorMethod) &&
        Objects.equals(this.errorSubtype, errorProjected.errorSubtype) &&
        Objects.equals(this.errorType, errorProjected.errorType) &&
        Objects.equals(this.id, errorProjected.id) &&
        Objects.equals(this.value, errorProjected.value);
  }

  @Override
  public int hashCode() {
    return Objects.hash(errorMethod, errorSubtype, errorType, id, value);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ErrorProjected {\n");
    
    sb.append("    errorMethod: ").append(toIndentedString(errorMethod)).append("\n");
    sb.append("    errorSubtype: ").append(toIndentedString(errorSubtype)).append("\n");
    sb.append("    errorType: ").append(toIndentedString(errorType)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

