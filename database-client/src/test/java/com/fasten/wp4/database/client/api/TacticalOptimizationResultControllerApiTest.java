/*
 * Database OAS
 * Open API Specification REST for FASTEN Holistic Simulator-Optimizer Tool
 *
 * OpenAPI spec version: 0.0.1-SNAPSHOT
 * Contact: Fasten-wp4@lists.inesctec.pt
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.fasten.wp4.database.client.api;

import com.fasten.wp4.database.client.invoker.ApiException;
import com.fasten.wp4.database.client.model.PageOfTacticalOptimizationResult;
import com.fasten.wp4.database.client.model.TacticalOptimizationResult;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TacticalOptimizationResultControllerApi
 */
@Ignore
public class TacticalOptimizationResultControllerApiTest {

    private final TacticalOptimizationResultControllerApi api = new TacticalOptimizationResultControllerApi();

    
    /**
     * Save a tacticalOptimizationResult
     *
     * Also returns the url to created data in header location 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createTacticalOptimizationResultTest() throws ApiException {
        TacticalOptimizationResult tacticalOptimizationResult = null;
        Object response = api.createTacticalOptimizationResult(tacticalOptimizationResult);

        // TODO: test validations
    }
    
    /**
     * Save a results list
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createTacticalOptimizationResultsTest() throws ApiException {
        List<TacticalOptimizationResult> tacticalOptimizationResults = null;
        Object response = api.createTacticalOptimizationResults(tacticalOptimizationResults);

        // TODO: test validations
    }
    
    /**
     * Delete a tacticalOptimizationResult
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteTacticalOptimizationResultTest() throws ApiException {
        Long id = null;
        api.deleteTacticalOptimizationResult(id);

        // TODO: test validations
    }
    
    /**
     * Find boolean by study
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void existsByTacticalOptimizationTest() throws ApiException {
        Long id = null;
        Boolean response = api.existsByTacticalOptimization(id);

        // TODO: test validations
    }
    
    /**
     * List all
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveAllTacticalOptimizationResultTest() throws ApiException {
        List<TacticalOptimizationResult> response = api.retrieveAllTacticalOptimizationResult();

        // TODO: test validations
    }
    
    /**
     * Find by study
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveByTacticalOptimizationTest() throws ApiException {
        Long id = null;
        TacticalOptimizationResult response = api.retrieveByTacticalOptimization(id);

        // TODO: test validations
    }
    
    /**
     * Find a tacticalOptimizationResult
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveTacticalOptimizationResultTest() throws ApiException {
        Long id = null;
        TacticalOptimizationResult response = api.retrieveTacticalOptimizationResult(id);

        // TODO: test validations
    }
    
    /**
     * List paged
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveTacticalOptimizationResultFilteredAndPagedTest() throws ApiException {
        String json = null;
        Integer page = null;
        Integer size = null;
        List<String> sort = null;
        PageOfTacticalOptimizationResult response = api.retrieveTacticalOptimizationResultFilteredAndPaged(json, page, size, sort);

        // TODO: test validations
    }
    
    /**
     * List paged
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveTacticalOptimizationResultPagedTest() throws ApiException {
        Integer page = null;
        Integer size = null;
        List<String> sort = null;
        PageOfTacticalOptimizationResult response = api.retrieveTacticalOptimizationResultPaged(page, size, sort);

        // TODO: test validations
    }
    
    /**
     * Update a tacticalOptimizationResult
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateTacticalOptimizationResultTest() throws ApiException {
        Long id = null;
        TacticalOptimizationResult object = null;
        Object response = api.updateTacticalOptimizationResult(id, object);

        // TODO: test validations
    }
    
}
