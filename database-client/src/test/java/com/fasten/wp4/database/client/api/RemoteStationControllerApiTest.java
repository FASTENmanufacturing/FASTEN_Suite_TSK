/*
 * Database OAS
 * Open API Specification REST for FASTEN Holistic Simulator-Optimizer Tool
 *
 * OpenAPI spec version: 0.0.1-SNAPSHOT
 * Contact: Fasten-wp4@lists.inesctec.pt
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.fasten.wp4.database.client.api;

import com.fasten.wp4.database.client.invoker.ApiException;
import com.fasten.wp4.database.client.model.PageOfRemoteStation;
import com.fasten.wp4.database.client.model.RemoteStation;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for RemoteStationControllerApi
 */
@Ignore
public class RemoteStationControllerApiTest {

    private final RemoteStationControllerApi api = new RemoteStationControllerApi();

    
    /**
     * Register Remote Station
     *
     * Also returns the url to created data in header location
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createRemoteStationTest() throws ApiException {
        RemoteStation remoteStation = null;
        Object response = api.createRemoteStation(remoteStation);

        // TODO: test validations
    }
    
    /**
     * Delete the Remote Station
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteRemoteStationTest() throws ApiException {
        Long id = null;
        api.deleteRemoteStation(id);

        // TODO: test validations
    }
    
    /**
     * Find remote stations by name
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveAllByNameTest() throws ApiException {
        List<String> response = api.retrieveAllByName();

        // TODO: test validations
    }
    
    /**
     * List all Remote Stations
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveAllRemoteStationTest() throws ApiException {
        List<RemoteStation> response = api.retrieveAllRemoteStation();

        // TODO: test validations
    }
    
    /**
     * Retrive one Remote Station
     *
     * Also returns a link to retrieve all remote station with rel - all
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveRemoteStationTest() throws ApiException {
        Long id = null;
        RemoteStation response = api.retrieveRemoteStation(id);

        // TODO: test validations
    }
    
    /**
     * Retrive Remote Stations by city name
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveRemoteStationByCityNameTest() throws ApiException {
        String city = null;
        List<RemoteStation> response = api.retrieveRemoteStationByCityName(city);

        // TODO: test validations
    }
    
    /**
     * Retrive one Remote Station by code
     *
     * Also returns a link to retrieve all remote station with rel - all
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveRemoteStationByCodeTest() throws ApiException {
        String code = null;
        RemoteStation response = api.retrieveRemoteStationByCode(code);

        // TODO: test validations
    }
    
    /**
     * Retrive Remote Stations by name without space and uppercased
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveRemoteStationByExcellNameTest() throws ApiException {
        String excellName = null;
        RemoteStation response = api.retrieveRemoteStationByExcellName(excellName);

        // TODO: test validations
    }
    
    /**
     * Retrive one Remote Station by name
     *
     * Also returns a link to retrieve all remote station with rel - all
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveRemoteStationByNameTest() throws ApiException {
        String name = null;
        RemoteStation response = api.retrieveRemoteStationByName(name);

        // TODO: test validations
    }
    
    /**
     * Find remote stations by priority
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveRemoteStationByPriorityTest() throws ApiException {
        String priority = null;
        List<RemoteStation> response = api.retrieveRemoteStationByPriority(priority);

        // TODO: test validations
    }
    
    /**
     * Retrive a list of Remote Station candidates in a Tactical Optimization Study
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveRemoteStationByTacticalOptimizationTest() throws ApiException {
        Long id = null;
        List<RemoteStation> response = api.retrieveRemoteStationByTacticalOptimization(id);

        // TODO: test validations
    }
    
    /**
     * List paged
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveRemoteStationFilteredAndPagedTest() throws ApiException {
        String json = null;
        Integer page = null;
        Integer size = null;
        List<String> sort = null;
        PageOfRemoteStation response = api.retrieveRemoteStationFilteredAndPaged(json, page, size, sort);

        // TODO: test validations
    }
    
    /**
     * List paged
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveRemoteStationPagedTest() throws ApiException {
        Integer page = null;
        Integer size = null;
        List<String> sort = null;
        PageOfRemoteStation response = api.retrieveRemoteStationPaged(page, size, sort);

        // TODO: test validations
    }
    
    /**
     * Update a Remote Station
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateRemoteStationTest() throws ApiException {
        Long id = null;
        RemoteStation object = null;
        Object response = api.updateRemoteStation(id, object);

        // TODO: test validations
    }
    
}
