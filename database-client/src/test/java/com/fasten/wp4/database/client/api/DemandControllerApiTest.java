/*
 * Database OAS
 * Open API Specification REST for FASTEN Holistic Simulator-Optimizer Tool
 *
 * OpenAPI spec version: 0.0.1-SNAPSHOT
 * Contact: Fasten-wp4@lists.inesctec.pt
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.fasten.wp4.database.client.api;

import com.fasten.wp4.database.client.invoker.ApiException;
import com.fasten.wp4.database.client.model.Demand;
import com.fasten.wp4.database.client.model.PageOfDemand;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DemandControllerApi
 */
@Ignore
public class DemandControllerApiTest {

    private final DemandControllerApi api = new DemandControllerApi();

    
    /**
     * Create a new demand
     *
     * Also returns the url to created data in header location
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createDemandTest() throws ApiException {
        Demand demand = null;
        Object response = api.createDemand(demand);

        // TODO: test validations
    }
    
    /**
     * Delete the demand
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteDemandTest() throws ApiException {
        Long id = null;
        api.deleteDemand(id);

        // TODO: test validations
    }
    
    /**
     * List all demands
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveAllDemandTest() throws ApiException {
        List<Demand> response = api.retrieveAllDemand();

        // TODO: test validations
    }
    
    /**
     * List all demands
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveAllOrderByOrderDateTest() throws ApiException {
        List<Demand> response = api.retrieveAllOrderByOrderDate();

        // TODO: test validations
    }
    
    /**
     * Count demands in damand range (date format MM/dd/yyyy)
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveBetweenTest() throws ApiException {
        String end = null;
        String start = null;
        List<Demand> response = api.retrieveBetween(end, start);

        // TODO: test validations
    }
    
    /**
     * Retrieve demands for a prediction study
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveByPredictionTest() throws ApiException {
        String prediction = null;
        List<Demand> response = api.retrieveByPrediction(prediction);

        // TODO: test validations
    }
    
    /**
     * Retrieve demands for a prediction study
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveByPredictionParamsTest() throws ApiException {
        Long distributionCenterId = null;
        String end = null;
        Long partId = null;
        String start = null;
        Integer response = api.retrieveByPredictionParams(distributionCenterId, end, partId, start);

        // TODO: test validations
    }
    
    /**
     * Count candidates in damand range (date format MM/dd/yyyy)
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveCandidatesTest() throws ApiException {
        String end = null;
        String start = null;
        Integer response = api.retrieveCandidates(end, start);

        // TODO: test validations
    }
    
    /**
     * Count candidates in damand range (date format MM/dd/yyyy)
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveCandidatesWithoutCoordinatesTest() throws ApiException {
        String end = null;
        String start = null;
        Integer response = api.retrieveCandidatesWithoutCoordinates(end, start);

        // TODO: test validations
    }
    
    /**
     * Find one demand
     *
     * Also returns a link to retrieve all demand with rel - all
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveDemandTest() throws ApiException {
        Long id = null;
        Demand response = api.retrieveDemand(id);

        // TODO: test validations
    }
    
    /**
     * Find one demand by code
     *
     * Also returns a link to retrieve all demand with rel - all
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveDemandByCodeTest() throws ApiException {
        String code = null;
        Demand response = api.retrieveDemandByCode(code);

        // TODO: test validations
    }
    
    /**
     * Retrive a list of demands in a Tactical Optimization Study
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveDemandByTacticalOptimizationTest() throws ApiException {
        Long id = null;
        List<Demand> response = api.retrieveDemandByTacticalOptimization(id);

        // TODO: test validations
    }
    
    /**
     * List paged
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveDemandFilteredAndPagedTest() throws ApiException {
        String json = null;
        Integer page = null;
        Integer size = null;
        List<String> sort = null;
        PageOfDemand response = api.retrieveDemandFilteredAndPaged(json, page, size, sort);

        // TODO: test validations
    }
    
    /**
     * List paged
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveDemandPagedTest() throws ApiException {
        Integer page = null;
        Integer size = null;
        List<String> sort = null;
        PageOfDemand response = api.retrieveDemandPaged(page, size, sort);

        // TODO: test validations
    }
    
    /**
     * Count demands in damand range (date format MM/dd/yyyy)
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveQuantityBetweenTest() throws ApiException {
        String end = null;
        String start = null;
        Integer response = api.retrieveQuantityBetween(end, start);

        // TODO: test validations
    }
    
    /**
     * Edit the demand
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateDemandTest() throws ApiException {
        Long id = null;
        Demand object = null;
        Object response = api.updateDemand(id, object);

        // TODO: test validations
    }
    
}
