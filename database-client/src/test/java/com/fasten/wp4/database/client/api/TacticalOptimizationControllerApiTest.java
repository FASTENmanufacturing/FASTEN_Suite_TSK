/*
 * Database OAS
 * Open API Specification REST for FASTEN Holistic Simulator-Optimizer Tool
 *
 * OpenAPI spec version: 0.0.1-SNAPSHOT
 * Contact: Fasten-wp4@lists.inesctec.pt
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.fasten.wp4.database.client.api;

import com.fasten.wp4.database.client.invoker.ApiException;
import com.fasten.wp4.database.client.model.PageOfTacticalOptimization;
import com.fasten.wp4.database.client.model.TacticalOptimization;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TacticalOptimizationControllerApi
 */
@Ignore
public class TacticalOptimizationControllerApiTest {

    private final TacticalOptimizationControllerApi api = new TacticalOptimizationControllerApi();

    
    /**
     * Configura a optimization
     *
     * Also returns the url to created data in header location 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createTacticalOptimizationTest() throws ApiException {
        TacticalOptimization tacticalOptimization = null;
        Object response = api.createTacticalOptimization(tacticalOptimization);

        // TODO: test validations
    }
    
    /**
     * Delete the tacticalOptimization&#39;s configurations
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteTacticalOptimizationTest() throws ApiException {
        Long id = null;
        api.deleteTacticalOptimization(id);

        // TODO: test validations
    }
    
    /**
     * List all configured optimizations
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveAllTacticalOptimizationTest() throws ApiException {
        List<TacticalOptimization> response = api.retrieveAllTacticalOptimization();

        // TODO: test validations
    }
    
    /**
     * Find the tacticalOptimization configurations
     *
     * Also returns a link to retrieve all tacticalOptimization with rel - all
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveTacticalOptimizationTest() throws ApiException {
        Long id = null;
        TacticalOptimization response = api.retrieveTacticalOptimization(id);

        // TODO: test validations
    }
    
    /**
     * List paged
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveTacticalOptimizationFilteredAndPagedTest() throws ApiException {
        String json = null;
        Integer page = null;
        Integer size = null;
        List<String> sort = null;
        PageOfTacticalOptimization response = api.retrieveTacticalOptimizationFilteredAndPaged(json, page, size, sort);

        // TODO: test validations
    }
    
    /**
     * List paged
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveTacticalOptimizationPagedTest() throws ApiException {
        Integer page = null;
        Integer size = null;
        List<String> sort = null;
        PageOfTacticalOptimization response = api.retrieveTacticalOptimizationPaged(page, size, sort);

        // TODO: test validations
    }
    
    /**
     * Update a optimization
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateTacticalOptimizationTest() throws ApiException {
        Long id = null;
        TacticalOptimization object = null;
        Object response = api.updateTacticalOptimization(id, object);

        // TODO: test validations
    }
    
    /**
     * Validate a tactical optimization
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void validateTacticalOptimizationTest() throws ApiException {
        Long id = null;
        Object response = api.validateTacticalOptimization(id);

        // TODO: test validations
    }
    
}
