/*
 * Database OAS
 * Open API Specification REST for FASTEN Holistic Simulator-Optimizer Tool
 *
 * OpenAPI spec version: 0.0.1-SNAPSHOT
 * Contact: Fasten-wp4@lists.inesctec.pt
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.fasten.wp4.database.client.api;

import com.fasten.wp4.database.client.invoker.ApiException;
import com.fasten.wp4.database.client.model.PageOfPart;
import com.fasten.wp4.database.client.model.Part;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PartControllerApi
 */
@Ignore
public class PartControllerApiTest {

    private final PartControllerApi api = new PartControllerApi();

    
    /**
     * Create a new part
     *
     * Also returns the url to created data in header location
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createPartTest() throws ApiException {
        Part part = null;
        Object response = api.createPart(part);

        // TODO: test validations
    }
    
    /**
     * Delete the part
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletePartTest() throws ApiException {
        Long id = null;
        api.deletePart(id);

        // TODO: test validations
    }
    
    /**
     * Find parts name
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveAllDistinctByNameTest() throws ApiException {
        List<String> response = api.retrieveAllDistinctByName();

        // TODO: test validations
    }
    
    /**
     * List all parts
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveAllPartTest() throws ApiException {
        List<Part> response = api.retrieveAllPart();

        // TODO: test validations
    }
    
    /**
     * Find one parts
     *
     * Also returns a link to retrieve all part with rel - all
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrievePartTest() throws ApiException {
        Long id = null;
        Part response = api.retrievePart(id);

        // TODO: test validations
    }
    
    /**
     * Find one part by code
     *
     * Also returns a link to retrieve all part with rel - all
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrievePartByCodeTest() throws ApiException {
        String code = null;
        Part response = api.retrievePartByCode(code);

        // TODO: test validations
    }
    
    /**
     * Find one part by code and priority
     *
     * Also returns a link to retrieve all part with rel - all
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrievePartByCodeAndPriorityTest() throws ApiException {
        String code = null;
        String priority = null;
        Part response = api.retrievePartByCodeAndPriority(code, priority);

        // TODO: test validations
    }
    
    /**
     * Retrive Part by name without space and uppercased
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrievePartByExcellNameTest() throws ApiException {
        String excellName = null;
        Part response = api.retrievePartByExcellName(excellName);

        // TODO: test validations
    }
    
    /**
     * Find one part by layout
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrievePartByLayoutTest() throws ApiException {
        String layout = null;
        Part response = api.retrievePartByLayout(layout);

        // TODO: test validations
    }
    
    /**
     * Retrive Part by name 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrievePartByNameTest() throws ApiException {
        String name = null;
        Part response = api.retrievePartByName(name);

        // TODO: test validations
    }
    
    /**
     * Find parts by name like
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrievePartByNameLikeTest() throws ApiException {
        String name = null;
        List<String> response = api.retrievePartByNameLike(name);

        // TODO: test validations
    }
    
    /**
     * Find parts by priority
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrievePartByPriorityTest() throws ApiException {
        String priority = null;
        List<Part> response = api.retrievePartByPriority(priority);

        // TODO: test validations
    }
    
    /**
     * List paged
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrievePartFilteredAndPagedTest() throws ApiException {
        String json = null;
        Integer page = null;
        Integer size = null;
        List<String> sort = null;
        PageOfPart response = api.retrievePartFilteredAndPaged(json, page, size, sort);

        // TODO: test validations
    }
    
    /**
     * List paged
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrievePartPagedTest() throws ApiException {
        Integer page = null;
        Integer size = null;
        List<String> sort = null;
        PageOfPart response = api.retrievePartPaged(page, size, sort);

        // TODO: test validations
    }
    
    /**
     * Edit the part
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updatePartTest() throws ApiException {
        Long id = null;
        Part object = null;
        Object response = api.updatePart(id, object);

        // TODO: test validations
    }
    
}
