/*
 * Database OAS
 * Open API Specification REST for FASTEN Holistic Simulator-Optimizer Tool
 *
 * OpenAPI spec version: 0.0.1-SNAPSHOT
 * Contact: Fasten-wp4@lists.inesctec.pt
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.fasten.wp4.database.client.api;

import com.fasten.wp4.database.client.invoker.ApiException;
import com.fasten.wp4.database.client.model.PageOfWebHook;
import com.fasten.wp4.database.client.model.WebHook;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for WebHookControllerApi
 */
@Ignore
public class WebHookControllerApiTest {

    private final WebHookControllerApi api = new WebHookControllerApi();

    
    /**
     * Save a webhook
     *
     * Also returns the url to created data in header location 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createWebHookTest() throws ApiException {
        WebHook webhook = null;
        Object response = api.createWebHook(webhook);

        // TODO: test validations
    }
    
    /**
     * Delete a webhook
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteWebHookTest() throws ApiException {
        Long id = null;
        api.deleteWebHook(id);

        // TODO: test validations
    }
    
    /**
     * List all
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveAllWebHookTest() throws ApiException {
        List<WebHook> response = api.retrieveAllWebHook();

        // TODO: test validations
    }
    
    /**
     * Find a webhook
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveWebHookTest() throws ApiException {
        Long id = null;
        WebHook response = api.retrieveWebHook(id);

        // TODO: test validations
    }
    
    /**
     * Find WebHook by consumerServiceName equals
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveWebHookByConsumerServiceNameTest() throws ApiException {
        String consumerServiceName = null;
        WebHook response = api.retrieveWebHookByConsumerServiceName(consumerServiceName);

        // TODO: test validations
    }
    
    /**
     * List paged
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveWebHookFilteredAndPagedTest() throws ApiException {
        String json = null;
        Integer page = null;
        Integer size = null;
        List<String> sort = null;
        PageOfWebHook response = api.retrieveWebHookFilteredAndPaged(json, page, size, sort);

        // TODO: test validations
    }
    
    /**
     * List paged
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveWebHookPagedTest() throws ApiException {
        Integer page = null;
        Integer size = null;
        List<String> sort = null;
        PageOfWebHook response = api.retrieveWebHookPaged(page, size, sort);

        // TODO: test validations
    }
    
    /**
     * Find WebHooks by event
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveWebHooksByEventTest() throws ApiException {
        String event = null;
        List<WebHook> response = api.retrieveWebHooksByEvent(event);

        // TODO: test validations
    }
    
    /**
     * Update a webhook
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateWebHookTest() throws ApiException {
        Long id = null;
        WebHook object = null;
        Object response = api.updateWebHook(id, object);

        // TODO: test validations
    }
    
}
