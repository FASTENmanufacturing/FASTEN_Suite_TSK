/*
 * Database OAS
 * Open API Specification REST for FASTEN Holistic Simulator-Optimizer Tool
 *
 * OpenAPI spec version: 0.0.1-SNAPSHOT
 * Contact: Fasten-wp4@lists.inesctec.pt
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.fasten.wp4.database.client.api;

import com.fasten.wp4.database.client.invoker.ApiException;
import com.fasten.wp4.database.client.model.PageOfProcessingPart;
import com.fasten.wp4.database.client.model.ProcessingPart;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProcessingPartControllerApi
 */
@Ignore
public class ProcessingPartControllerApiTest {

    private final ProcessingPartControllerApi api = new ProcessingPartControllerApi();

    
    /**
     * Create a new processing part info
     *
     * Also returns the url to created data in header location
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createProcessingPartTest() throws ApiException {
        ProcessingPart processingPart = null;
        Object response = api.createProcessingPart(processingPart);

        // TODO: test validations
    }
    
    /**
     * Delete the processing part info
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteProcessingPartTest() throws ApiException {
        Long id = null;
        api.deleteProcessingPart(id);

        // TODO: test validations
    }
    
    /**
     * List all processing parts info
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveAllProcessingPartTest() throws ApiException {
        List<ProcessingPart> response = api.retrieveAllProcessingPart();

        // TODO: test validations
    }
    
    /**
     * Find max time in hours spent on processing parts 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveMaxHoursProcessingTest() throws ApiException {
        Long response = api.retrieveMaxHoursProcessing();

        // TODO: test validations
    }
    
    /**
     * Find one info about processing a parts
     *
     * Also returns a link to retrieve all processing parts with rel - all
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveProcessingPartTest() throws ApiException {
        Long id = null;
        ProcessingPart response = api.retrieveProcessingPart(id);

        // TODO: test validations
    }
    
    /**
     * Find processing parts by part name
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveProcessingPartByPartTest() throws ApiException {
        String partName = null;
        List<ProcessingPart> response = api.retrieveProcessingPartByPart(partName);

        // TODO: test validations
    }
    
    /**
     * Find one info about processing a part by part code and SRAM code
     *
     * Also returns a link to retrieve all processing parts with rel - all
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveProcessingPartByPartCodeAndSRAMCodeTest() throws ApiException {
        String srAMCode = null;
        String partCode = null;
        ProcessingPart response = api.retrieveProcessingPartByPartCodeAndSRAMCode(srAMCode, partCode);

        // TODO: test validations
    }
    
    /**
     * List paged
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveProcessingPartFilteredAndPagedTest() throws ApiException {
        String json = null;
        Integer page = null;
        Integer size = null;
        List<String> sort = null;
        PageOfProcessingPart response = api.retrieveProcessingPartFilteredAndPaged(json, page, size, sort);

        // TODO: test validations
    }
    
    /**
     * List paged
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveProcessingPartPagedTest() throws ApiException {
        Integer page = null;
        Integer size = null;
        List<String> sort = null;
        PageOfProcessingPart response = api.retrieveProcessingPartPaged(page, size, sort);

        // TODO: test validations
    }
    
    /**
     * Edit the processing part info
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateProcessingPartTest() throws ApiException {
        Long id = null;
        ProcessingPart object = null;
        Object response = api.updateProcessingPart(id, object);

        // TODO: test validations
    }
    
}
