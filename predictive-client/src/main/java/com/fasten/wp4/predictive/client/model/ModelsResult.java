/*
 * Predictions  API
 * Have algorithm for demand forecasting
 *
 * OpenAPI spec version: 1.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.fasten.wp4.predictive.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasten.wp4.predictive.client.model.DemandData;
import com.fasten.wp4.predictive.client.model.ForecastErro;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.io.Serializable;

/**
 * ModelsResult
 */

public class ModelsResult implements Serializable {
  private static final long serialVersionUID = 1L;

  /**
   * Name of the forecasting method
   */
  @JsonAdapter(ModelEnum.Adapter.class)
  public enum ModelEnum {
    NAIVE("NAIVE"),
    
    SES("SES"),
    
    AR("AR"),
    
    HOLT("HOLT"),
    
    CF1("CF1"),
    
    CR("CR");

    private String value;

    ModelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ModelEnum fromValue(String text) {
      for (ModelEnum b : ModelEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<ModelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ModelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ModelEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ModelEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("model")
  private ModelEnum model = null;

  @SerializedName("trainingPrediction")
  private List<DemandData> trainingPrediction = null;

  @SerializedName("testPrediction")
  private List<DemandData> testPrediction = null;

  @SerializedName("forecastDemand")
  private List<DemandData> forecastDemand = null;

  @SerializedName("error")
  private List<ForecastErro> error = null;

  @SerializedName("part")
  private String part = null;

  @SerializedName("remoteStation")
  private String remoteStation = null;

  public ModelsResult model(ModelEnum model) {
    this.model = model;
    return this;
  }

   /**
   * Name of the forecasting method
   * @return model
  **/
  @ApiModelProperty(example = "NAIVE", required = true, value = "Name of the forecasting method")
  public ModelEnum getModel() {
    return model;
  }

  public void setModel(ModelEnum model) {
    this.model = model;
  }

  public ModelsResult trainingPrediction(List<DemandData> trainingPrediction) {
    this.trainingPrediction = trainingPrediction;
    return this;
  }

  public ModelsResult addTrainingPredictionItem(DemandData trainingPredictionItem) {
    if (this.trainingPrediction == null) {
      this.trainingPrediction = new ArrayList<>();
    }
    this.trainingPrediction.add(trainingPredictionItem);
    return this;
  }

   /**
   * Predicted demands in trainning set.
   * @return trainingPrediction
  **/
  @ApiModelProperty(value = "Predicted demands in trainning set.")
  public List<DemandData> getTrainingPrediction() {
    return trainingPrediction;
  }

  public void setTrainingPrediction(List<DemandData> trainingPrediction) {
    this.trainingPrediction = trainingPrediction;
  }

  public ModelsResult testPrediction(List<DemandData> testPrediction) {
    this.testPrediction = testPrediction;
    return this;
  }

  public ModelsResult addTestPredictionItem(DemandData testPredictionItem) {
    if (this.testPrediction == null) {
      this.testPrediction = new ArrayList<>();
    }
    this.testPrediction.add(testPredictionItem);
    return this;
  }

   /**
   * Predicted demands in test set.
   * @return testPrediction
  **/
  @ApiModelProperty(value = "Predicted demands in test set.")
  public List<DemandData> getTestPrediction() {
    return testPrediction;
  }

  public void setTestPrediction(List<DemandData> testPrediction) {
    this.testPrediction = testPrediction;
  }

  public ModelsResult forecastDemand(List<DemandData> forecastDemand) {
    this.forecastDemand = forecastDemand;
    return this;
  }

  public ModelsResult addForecastDemandItem(DemandData forecastDemandItem) {
    if (this.forecastDemand == null) {
      this.forecastDemand = new ArrayList<>();
    }
    this.forecastDemand.add(forecastDemandItem);
    return this;
  }

   /**
   * Predicted demands for the horizon parameter.
   * @return forecastDemand
  **/
  @ApiModelProperty(value = "Predicted demands for the horizon parameter.")
  public List<DemandData> getForecastDemand() {
    return forecastDemand;
  }

  public void setForecastDemand(List<DemandData> forecastDemand) {
    this.forecastDemand = forecastDemand;
  }

  public ModelsResult error(List<ForecastErro> error) {
    this.error = error;
    return this;
  }

  public ModelsResult addErrorItem(ForecastErro errorItem) {
    if (this.error == null) {
      this.error = new ArrayList<>();
    }
    this.error.add(errorItem);
    return this;
  }

   /**
   * Error of forecating
   * @return error
  **/
  @ApiModelProperty(value = "Error of forecating")
  public List<ForecastErro> getError() {
    return error;
  }

  public void setError(List<ForecastErro> error) {
    this.error = error;
  }

  public ModelsResult part(String part) {
    this.part = part;
    return this;
  }

   /**
   * Part name
   * @return part
  **/
  @ApiModelProperty(example = "Bico Dosador", required = true, value = "Part name")
  public String getPart() {
    return part;
  }

  public void setPart(String part) {
    this.part = part;
  }

  public ModelsResult remoteStation(String remoteStation) {
    this.remoteStation = remoteStation;
    return this;
  }

   /**
   * Demand location
   * @return remoteStation
  **/
  @ApiModelProperty(example = "SÃ£o Paulo", required = true, value = "Demand location")
  public String getRemoteStation() {
    return remoteStation;
  }

  public void setRemoteStation(String remoteStation) {
    this.remoteStation = remoteStation;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ModelsResult modelsResult = (ModelsResult) o;
    return Objects.equals(this.model, modelsResult.model) &&
        Objects.equals(this.trainingPrediction, modelsResult.trainingPrediction) &&
        Objects.equals(this.testPrediction, modelsResult.testPrediction) &&
        Objects.equals(this.forecastDemand, modelsResult.forecastDemand) &&
        Objects.equals(this.error, modelsResult.error) &&
        Objects.equals(this.part, modelsResult.part) &&
        Objects.equals(this.remoteStation, modelsResult.remoteStation);
  }

  @Override
  public int hashCode() {
    return Objects.hash(model, trainingPrediction, testPrediction, forecastDemand, error, part, remoteStation);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ModelsResult {\n");
    
    sb.append("    model: ").append(toIndentedString(model)).append("\n");
    sb.append("    trainingPrediction: ").append(toIndentedString(trainingPrediction)).append("\n");
    sb.append("    testPrediction: ").append(toIndentedString(testPrediction)).append("\n");
    sb.append("    forecastDemand: ").append(toIndentedString(forecastDemand)).append("\n");
    sb.append("    error: ").append(toIndentedString(error)).append("\n");
    sb.append("    part: ").append(toIndentedString(part)).append("\n");
    sb.append("    remoteStation: ").append(toIndentedString(remoteStation)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

