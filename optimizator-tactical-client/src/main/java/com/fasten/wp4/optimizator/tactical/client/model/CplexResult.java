/*
 * Tactical Optimizator OAS
 * Tactical Optimizator Open API Specification REST for FASTEN Holistic Simulator-Optimizer Tool
 *
 * OpenAPI spec version: 0.0.1-SNAPSHOT
 * Contact: Fasten-wp4@lists.inesctec.pt
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.fasten.wp4.optimizator.tactical.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasten.wp4.optimizator.tactical.client.model.Constraint;
import com.fasten.wp4.optimizator.tactical.client.model.Variable;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.io.Serializable;

/**
 * CplexResult
 */

public class CplexResult implements Serializable {
  private static final long serialVersionUID = 1L;

  @SerializedName("constraints")
  private List<Constraint> constraints = null;

  /**
   * Gets or Sets objectiveStatus
   */
  @JsonAdapter(ObjectiveStatusEnum.Adapter.class)
  public enum ObjectiveStatusEnum {
    ERROR("Error"),
    
    UNKNOWN("Unknown"),
    
    BOUNDED("Bounded"),
    
    OPTIMAL("Optimal"),
    
    INFEASIBLE("Infeasible"),
    
    UNBOUNDED("Unbounded"),
    
    INFEASIBLEORUNBOUNDED("InfeasibleOrUnbounded");

    private String value;

    ObjectiveStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ObjectiveStatusEnum fromValue(String text) {
      for (ObjectiveStatusEnum b : ObjectiveStatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<ObjectiveStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ObjectiveStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ObjectiveStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ObjectiveStatusEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("objectiveStatus")
  private ObjectiveStatusEnum objectiveStatus = null;

  @SerializedName("objectiveValue")
  private Double objectiveValue = null;

  @SerializedName("variables")
  private List<Variable> variables = null;

  public CplexResult constraints(List<Constraint> constraints) {
    this.constraints = constraints;
    return this;
  }

  public CplexResult addConstraintsItem(Constraint constraintsItem) {
    if (this.constraints == null) {
      this.constraints = new ArrayList<>();
    }
    this.constraints.add(constraintsItem);
    return this;
  }

   /**
   * Get constraints
   * @return constraints
  **/
  @ApiModelProperty(value = "")
  public List<Constraint> getConstraints() {
    return constraints;
  }

  public void setConstraints(List<Constraint> constraints) {
    this.constraints = constraints;
  }

  public CplexResult objectiveStatus(ObjectiveStatusEnum objectiveStatus) {
    this.objectiveStatus = objectiveStatus;
    return this;
  }

   /**
   * Get objectiveStatus
   * @return objectiveStatus
  **/
  @ApiModelProperty(value = "")
  public ObjectiveStatusEnum getObjectiveStatus() {
    return objectiveStatus;
  }

  public void setObjectiveStatus(ObjectiveStatusEnum objectiveStatus) {
    this.objectiveStatus = objectiveStatus;
  }

  public CplexResult objectiveValue(Double objectiveValue) {
    this.objectiveValue = objectiveValue;
    return this;
  }

   /**
   * Get objectiveValue
   * @return objectiveValue
  **/
  @ApiModelProperty(value = "")
  public Double getObjectiveValue() {
    return objectiveValue;
  }

  public void setObjectiveValue(Double objectiveValue) {
    this.objectiveValue = objectiveValue;
  }

  public CplexResult variables(List<Variable> variables) {
    this.variables = variables;
    return this;
  }

  public CplexResult addVariablesItem(Variable variablesItem) {
    if (this.variables == null) {
      this.variables = new ArrayList<>();
    }
    this.variables.add(variablesItem);
    return this;
  }

   /**
   * Get variables
   * @return variables
  **/
  @ApiModelProperty(value = "")
  public List<Variable> getVariables() {
    return variables;
  }

  public void setVariables(List<Variable> variables) {
    this.variables = variables;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CplexResult cplexResult = (CplexResult) o;
    return Objects.equals(this.constraints, cplexResult.constraints) &&
        Objects.equals(this.objectiveStatus, cplexResult.objectiveStatus) &&
        Objects.equals(this.objectiveValue, cplexResult.objectiveValue) &&
        Objects.equals(this.variables, cplexResult.variables);
  }

  @Override
  public int hashCode() {
    return Objects.hash(constraints, objectiveStatus, objectiveValue, variables);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CplexResult {\n");
    
    sb.append("    constraints: ").append(toIndentedString(constraints)).append("\n");
    sb.append("    objectiveStatus: ").append(toIndentedString(objectiveStatus)).append("\n");
    sb.append("    objectiveValue: ").append(toIndentedString(objectiveValue)).append("\n");
    sb.append("    variables: ").append(toIndentedString(variables)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

