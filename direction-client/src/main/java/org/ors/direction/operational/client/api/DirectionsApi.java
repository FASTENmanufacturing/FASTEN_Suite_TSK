/*
 * OpenRouteService
 * This is the openrouteservice API V2 documentation for ORS Core-Version `5.0.0`. Documentations for [older Core-Versions](https://github.com/GIScience/openrouteservice-docs/releases) can be rendered with the [Swagger-Editor](https://editor.swagger.io/).
 *
 * OpenAPI spec version: 5.0.0
 * Contact: info@openrouteservice.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package org.ors.direction.operational.client.api;

import org.ors.direction.client.invoker.ApiCallback;
import org.ors.direction.client.invoker.ApiClient;
import org.ors.direction.client.invoker.ApiException;
import org.ors.direction.client.invoker.ApiResponse;
import org.ors.direction.client.invoker.Configuration;
import org.ors.direction.client.invoker.Pair;
import org.ors.direction.client.invoker.ProgressRequestBody;
import org.ors.direction.client.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.ors.direction.client.model.GeoJSONRouteResponse1;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DirectionsApi {
    private ApiClient apiClient;

    public DirectionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DirectionsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for getSimpleGeoJsonRouteUsingGET
     * @param end Destination coordinate of the route (required)
     * @param profile Specifies the route profile. (required)
     * @param start Start coordinate of the route (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSimpleGeoJsonRouteUsingGETCall(String end, String profile, String start, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/directions/{profile}"
            .replaceAll("\\{" + "profile" + "\\}", apiClient.escapeString(profile.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (end != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("end", end));
        if (start != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start", start));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/geo+json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key-Parameter" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSimpleGeoJsonRouteUsingGETValidateBeforeCall(String end, String profile, String start, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'end' is set
        if (end == null) {
            throw new ApiException("Missing the required parameter 'end' when calling getSimpleGeoJsonRouteUsingGET(Async)");
        }
        
        // verify the required parameter 'profile' is set
        if (profile == null) {
            throw new ApiException("Missing the required parameter 'profile' when calling getSimpleGeoJsonRouteUsingGET(Async)");
        }
        
        // verify the required parameter 'start' is set
        if (start == null) {
            throw new ApiException("Missing the required parameter 'start' when calling getSimpleGeoJsonRouteUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = getSimpleGeoJsonRouteUsingGETCall(end, profile, start, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Directions Service (GET)
     * Get a basic route between two points with the profile provided. Returned response is in GeoJSON format. This method does not accept any request body or parameters other than profile, start coordinate, and end coordinate.
     * @param end Destination coordinate of the route (required)
     * @param profile Specifies the route profile. (required)
     * @param start Start coordinate of the route (required)
     * @return GeoJSONRouteResponse1
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GeoJSONRouteResponse1 getSimpleGeoJsonRouteUsingGET(String end, String profile, String start) throws ApiException {
        ApiResponse<GeoJSONRouteResponse1> resp = getSimpleGeoJsonRouteUsingGETWithHttpInfo(end, profile, start);
        return resp.getData();
    }

    /**
     * Directions Service (GET)
     * Get a basic route between two points with the profile provided. Returned response is in GeoJSON format. This method does not accept any request body or parameters other than profile, start coordinate, and end coordinate.
     * @param end Destination coordinate of the route (required)
     * @param profile Specifies the route profile. (required)
     * @param start Start coordinate of the route (required)
     * @return ApiResponse&lt;GeoJSONRouteResponse1&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GeoJSONRouteResponse1> getSimpleGeoJsonRouteUsingGETWithHttpInfo(String end, String profile, String start) throws ApiException {
        com.squareup.okhttp.Call call = getSimpleGeoJsonRouteUsingGETValidateBeforeCall(end, profile, start, null, null);
        Type localVarReturnType = new TypeToken<GeoJSONRouteResponse1>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Directions Service (GET) (asynchronously)
     * Get a basic route between two points with the profile provided. Returned response is in GeoJSON format. This method does not accept any request body or parameters other than profile, start coordinate, and end coordinate.
     * @param end Destination coordinate of the route (required)
     * @param profile Specifies the route profile. (required)
     * @param start Start coordinate of the route (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSimpleGeoJsonRouteUsingGETAsync(String end, String profile, String start, final ApiCallback<GeoJSONRouteResponse1> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSimpleGeoJsonRouteUsingGETValidateBeforeCall(end, profile, start, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GeoJSONRouteResponse1>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
