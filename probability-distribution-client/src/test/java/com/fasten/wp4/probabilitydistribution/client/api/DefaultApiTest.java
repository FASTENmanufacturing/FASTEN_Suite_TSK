/*
 * Probability Distribution Generator
 * API Description
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.fasten.wp4.probabilitydistribution.client.api;

import java.math.BigDecimal;

import org.junit.Ignore;
import org.junit.Test;

import com.fasten.wp4.probabilitydistribution.client.invoker.ApiException;
import com.fasten.wp4.probabilitydistribution.client.model.ProbabilityDistribuitionRequest;
import com.fasten.wp4.probabilitydistribution.client.model.ProbabilityDistributionResult;

/**
 * API tests for DefaultApi
 */
//@Ignore
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    
    /**
     *  Generate probabilities distributions
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void fitProbPostTest() throws ApiException {
        ProbabilityDistribuitionRequest y = new ProbabilityDistribuitionRequest();
        Double doubl[] = new Double[]{100.1865d,100.5548d,98.8803d,99.3621d,98.9993d,100.9672d,100.3277d,99.3069d,101.0472d,100.6949d,99.5776d,100.8458d,100.3987d,98.8587d,99.9565d,98.9501d,100.8554d,100.9959d,100.1117d,100.474d,99.7689d,101.1424d,101.3264d,99.8967d,98.8304d,101.6301d,99.9902d,100.3225d,98.9521d,98.9468d,100.32d,99.3146d,100.3734d,100.2005d,101.7788d,102.4662d,99.3101d,101.4304d,100.4581d,99.2782d,100.9109d,99.4804d,99.1832d,99.4537d,100.4155d,100.3121d,101.4599d,100.7764d,100.4114d,99.9804d,101.7907d,99.7267d,101.0442d,101.6197d,102.2009d,99.261d,100.8537d,99.5556d,99.4638d,102.1647d,100.7013d,100.941d,99.3403d,99.5197d,99.5728d,99.3917d,100.2117d,99.7223d,102.0269d,99.6536d,100.8141d,100.8925d,99.4065d,98.5096d,100.7378d,101.1119d,99.9934d,100.7577d,99.6792d,98.1452d,99.2698d,99.6548d,101.0746d,100.6277d,98.9809d,100.7833d,100.8413d,98.9827d,98.2935d,102.4016d,99.7586d,100.4721d,100.8287d,101.5979d,99.0565d,100.7475d,101.2043d,98.1597d,98.7257d,100.1047d,100.8229d,101.2383d,100.2947d,101.1667d,101.5638d,99.2654d,100.09d,101.2276d,100.2411d,100.0682d,100.0087d,100.1033d,99.0571d,98.4573d,101.1674d,100.9108d,101.4138d,100.2759d,99.5895d,98.5245d,100.6618d,100.0185d,100.7363d,100.4145d,99.8396d,99.7345d,100.7428d,99.8918d,98.5672d,99.4807d,100.5673d,99.3316d,100.4148d,98.8927d,99.7379d,99.6862d,99.9142d,99.5622d,98.2961d,101.1157d,101.0328d,100.7359d,99.1057d,100.1308d,98.7371d,101.6624d,99.9377d,100.1565d,100.2602d,100.7712d,99.9846d,98.9848d,100.6903d,99.7963d,98.5896d,99.7756d,100.26d,100.9627d,99.6745d,98.2901d,99.6613d,100.1181d,99.9054d,99.32d,100.6081d,99.7633d,100.7102d,100.5769d,98.3824d,98.28d,101.2752d,99.7584d,100.9358d,101.2141d,100.6523d,101.4614d,99.2291d,100.5197d,99.5955d,100.1679d,100.0535d,100.5713d,98.9778d,101.0001d,99.933d,100.1755d,99.5069d,99.295d,100.584d,102.5752d,100.5022d,99.4043d,99.8367d,99.4252d,100.5479d,99.7041d,100.8594d,98.9192d,99.6738d,99.5058d};
        for (Double d : doubl) {
			y.addYItem(new BigDecimal(d));
		}
        ProbabilityDistributionResult response = api.fitProbPost(y);
        System.out.println(response);
    }
    
}
