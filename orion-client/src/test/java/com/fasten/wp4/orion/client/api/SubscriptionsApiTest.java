/*
 * ngsi-v2
 * NGSI V2 API RC-2018.04
 *
 * OpenAPI spec version: v2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.fasten.wp4.orion.client.api;

import com.fasten.wp4.orion.client.invoker.ApiException;
import com.fasten.wp4.orion.client.model.ErrorResponse;
import com.fasten.wp4.orion.client.model.QueryPattern;
import com.fasten.wp4.orion.client.model.Subscription;
import com.fasten.wp4.orion.client.model.Subscription.StatusEnum;
import com.fasten.wp4.orion.client.model.SubscriptionNotification.AttrsFormatEnum;
import com.fasten.wp4.orion.client.model.SubscriptionNotification;
import com.fasten.wp4.orion.client.model.SubscriptionNotificationHttp;
import com.fasten.wp4.orion.client.model.SubscriptionSubject;
import com.fasten.wp4.orion.client.model.SubscriptionSubjectConditions;
import com.fasten.wp4.orion.client.model.UpdateSubscriptionResponse;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for SubscriptionsApi
 */
@Ignore
public class SubscriptionsApiTest {

	private final SubscriptionsApi api = new SubscriptionsApi();


	/**
	 * 
	 *
	 * Creates a new subscription. The subscription is represented by a JSON object as described at the beginning of this section. Response: * Successful operation uses 201 Created * Errors use a non-2xx and (optionally) an error payload. See subsection on \&quot;Error Responses\&quot; for   more details.
	 *
	 * @throws ApiException
	 *          if the Api call fails
	 */
	@Test
	@Ignore
	public void createIfNotExistsTest() throws ApiException {
		api.getApiClient().setDebugging(true);

		List<Subscription> subscriptions = api.retrieveSubscriptions(null,null,null);
		Subscription existentSubscription = subscriptions.parallelStream().filter(s -> s.getDescription().contains("IOT-OAS")).findAny().orElse(null);

		if(existentSubscription==null) {

			Subscription subscription = new Subscription();
			subscription.setDescription("Created by WP4 IOT-OAS http://200.131.17.17:11005");
			subscription.setStatus(StatusEnum.ACTIVE);

			SubscriptionSubject subject = new SubscriptionSubject();
			List<QueryPattern> entities = new ArrayList<QueryPattern>();
			QueryPattern entity = new QueryPattern();
			entity.setIdPattern(".*");
			entity.setType("printer3d");
			entities.add(entity);
			subject.setEntities(entities);
			SubscriptionSubjectConditions condition = new SubscriptionSubjectConditions();
			condition.setAttrs(new ArrayList<String>());
			subject.setConditions(condition);
			subscription.setSubject(subject);


			SubscriptionNotification notification = new SubscriptionNotification();
			notification.setAttrs(new ArrayList<String>());
			notification.setAttrsFormat(AttrsFormatEnum.KEYVALUES);
			notification.setOnlyChangedAttrs(false);
			notification.setMetadata(Arrays.asList("dateCreated","dateModified","TimeInstant","timestamp"));
			SubscriptionNotificationHttp http = new SubscriptionNotificationHttp();
			http.setUrl("http://200.131.17.17:11001/orion");
			notification.setHttp(http);
			subscription.setNotification(notification);

			subscription.setThrottling(1);
			api.createANewSubscription(subscription);
		}
	}


	@Test
	@Ignore
	public void createANewSubscriptionTest() throws ApiException {
		api.getApiClient().setDebugging(true);



		Subscription subscription = new Subscription();
		subscription.setDescription("Created by WP4 IOT-OAS http://200.131.17.17:11005");
		subscription.setStatus(StatusEnum.ACTIVE);

		SubscriptionSubject subject = new SubscriptionSubject();
		List<QueryPattern> entities = new ArrayList<QueryPattern>();
		QueryPattern entity = new QueryPattern();
		entity.setIdPattern(".*");
		entity.setType("printer3d");
		entities.add(entity);
		subject.setEntities(entities);
		SubscriptionSubjectConditions condition = new SubscriptionSubjectConditions();
		condition.setAttrs(new ArrayList<String>());
		subject.setConditions(condition);
		subscription.setSubject(subject);


		SubscriptionNotification notification = new SubscriptionNotification();
		notification.setAttrs(new ArrayList<String>());
		notification.setAttrsFormat(AttrsFormatEnum.KEYVALUES);
		notification.setOnlyChangedAttrs(false);
		notification.setMetadata(Arrays.asList("dateCreated","dateModified","TimeInstant","timestamp"));
		SubscriptionNotificationHttp http = new SubscriptionNotificationHttp();
		http.setUrl("http://200.131.17.17:11001/orion");
		notification.setHttp(http);
		subscription.setNotification(notification);

		subscription.setThrottling(1);
		api.createANewSubscription(subscription);

		// TODO: test validations
	}

	/**
	 * 
	 *
	 * Cancels subscription. Response: * Successful operation uses 204 No Content * Errors use a non-2xx and (optionally) an error payload. See subsection on \&quot;Error Responses\&quot; for   more details.
	 *
	 * @throws ApiException
	 *          if the Api call fails
	 */
	@Test
	@Ignore
	public void deleteSubscriptionTest() throws ApiException {
		String subscriptionId = null;
		api.deleteSubscription(subscriptionId);

		// TODO: test validations
	}

	/**
	 * 
	 *
	 * The response is the subscription represented by a JSON object as described at the beginning of this section. Response: * Successful operation uses 200 OK * Errors use a non-2xx and (optionally) an error payload. See subsection on \&quot;Error Responses\&quot; for   more details.
	 *
	 * @throws ApiException
	 *          if the Api call fails
	 */
	@Test
	@Ignore
	public void retrieveSubscriptionTest() throws ApiException {
		api.getApiClient().setDebugging(true);
		String subscriptionId = "5e3467a2a128e0c6fc92a345";
		Subscription response = api.retrieveSubscription(subscriptionId);
		System.out.println(response);
		// TODO: test validations
	}

	/**
	 * 
	 *
	 * Returns a list of all the subscriptions present in the system. Response: * Successful operation uses 200 OK * Errors use a non-2xx and (optionally) an error payload. See subsection on \&quot;Error Responses\&quot; for   more details.
	 *
	 * @throws ApiException
	 *          if the Api call fails
	 */
	@Test
	//    @Ignore
	public void retrieveSubscriptionsTest() throws ApiException {
		api.getApiClient().setDebugging(true);
		Double limit = null;
		Double offset = null;
		String options = null;
		List<Subscription> response = api.retrieveSubscriptions(limit, offset, options);

		// TODO: test validations
	}

	/**
	 * 
	 *
	 * Only the fields included in the request are updated in the subscription. Response: * Successful operation uses 204 No Content * Errors use a non-2xx and (optionally) an error payload. See subsection on \&quot;Error Responses\&quot; for   more details.
	 *
	 * @throws ApiException
	 *          if the Api call fails
	 */
	@Test
	@Ignore
	public void updateSubscriptionTest() throws ApiException {
		String subscriptionId = null;
		Subscription body = null;
		UpdateSubscriptionResponse response = api.updateSubscription(subscriptionId, body);

		// TODO: test validations
	}

}
