/*
 * ngsi-v2
 * NGSI V2 API RC-2018.04
 *
 * OpenAPI spec version: v2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.fasten.wp4.orion.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasten.wp4.orion.client.model.SubscriptionNotificationHttp;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.io.Serializable;

/**
 * Provider
 */

public class Provider implements Serializable {
  private static final long serialVersionUID = 1L;

  @SerializedName("http")
  private SubscriptionNotificationHttp http = null;

  /**
   * Gets or Sets supportedForwardingMode
   */
  @JsonAdapter(SupportedForwardingModeEnum.Adapter.class)
  public enum SupportedForwardingModeEnum {
    NONE("none"),
    
    QUERY("query"),
    
    UPDATE("update"),
    
    ALL("all");

    private String value;

    SupportedForwardingModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SupportedForwardingModeEnum fromValue(String text) {
      for (SupportedForwardingModeEnum b : SupportedForwardingModeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<SupportedForwardingModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SupportedForwardingModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SupportedForwardingModeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return SupportedForwardingModeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("supportedForwardingMode")
  private SupportedForwardingModeEnum supportedForwardingMode = null;

  public Provider http(SubscriptionNotificationHttp http) {
    this.http = http;
    return this;
  }

   /**
   * Get http
   * @return http
  **/
  @ApiModelProperty(value = "")
  public SubscriptionNotificationHttp getHttp() {
    return http;
  }

  public void setHttp(SubscriptionNotificationHttp http) {
    this.http = http;
  }

  public Provider supportedForwardingMode(SupportedForwardingModeEnum supportedForwardingMode) {
    this.supportedForwardingMode = supportedForwardingMode;
    return this;
  }

   /**
   * Get supportedForwardingMode
   * @return supportedForwardingMode
  **/
  @ApiModelProperty(value = "")
  public SupportedForwardingModeEnum getSupportedForwardingMode() {
    return supportedForwardingMode;
  }

  public void setSupportedForwardingMode(SupportedForwardingModeEnum supportedForwardingMode) {
    this.supportedForwardingMode = supportedForwardingMode;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Provider provider = (Provider) o;
    return Objects.equals(this.http, provider.http) &&
        Objects.equals(this.supportedForwardingMode, provider.supportedForwardingMode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(http, supportedForwardingMode);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Provider {\n");
    
    sb.append("    http: ").append(toIndentedString(http)).append("\n");
    sb.append("    supportedForwardingMode: ").append(toIndentedString(supportedForwardingMode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

