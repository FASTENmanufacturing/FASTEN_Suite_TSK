/*
 * ngsi-v2
 * NGSI V2 API RC-2018.04
 *
 * OpenAPI spec version: v2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.fasten.wp4.orion.client.api;

import com.fasten.wp4.orion.client.invoker.ApiCallback;
import com.fasten.wp4.orion.client.invoker.ApiClient;
import com.fasten.wp4.orion.client.invoker.ApiException;
import com.fasten.wp4.orion.client.invoker.ApiResponse;
import com.fasten.wp4.orion.client.invoker.Configuration;
import com.fasten.wp4.orion.client.invoker.Pair;
import com.fasten.wp4.orion.client.invoker.ProgressRequestBody;
import com.fasten.wp4.orion.client.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.fasten.wp4.orion.client.model.Attribute;
import com.fasten.wp4.orion.client.model.Entity;
import com.fasten.wp4.orion.client.model.ErrorResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class EntitiesApi {
    private ApiClient apiClient;

    public EntitiesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public EntitiesApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createEntity
     * @param body JSON Entity Representation (required)
     * @param options Options dictionary (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createEntityCall(Entity body, String options, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/entities";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (options != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("options", options));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "fiware_token" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createEntityValidateBeforeCall(Entity body, String options, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createEntity(Async)");
        }
        

        com.squareup.okhttp.Call call = createEntityCall(body, options, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * The payload is an object representing the entity to be created. The object follows the JSON entity Representation format (described in a \&quot;JSON Entity Representation\&quot; section). Response: * Successful operation uses 201 Created or 204 No Content (if upsert option is used). Response includes a &#x60;Location&#x60; header with the URL of the   created entity. * Errors use a non-2xx and (optionally) an error payload. See subsection on \&quot;Error Responses\&quot; for   more details.
     * @param body JSON Entity Representation (required)
     * @param options Options dictionary (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createEntity(Entity body, String options) throws ApiException {
        createEntityWithHttpInfo(body, options);
    }

    /**
     * 
     * The payload is an object representing the entity to be created. The object follows the JSON entity Representation format (described in a \&quot;JSON Entity Representation\&quot; section). Response: * Successful operation uses 201 Created or 204 No Content (if upsert option is used). Response includes a &#x60;Location&#x60; header with the URL of the   created entity. * Errors use a non-2xx and (optionally) an error payload. See subsection on \&quot;Error Responses\&quot; for   more details.
     * @param body JSON Entity Representation (required)
     * @param options Options dictionary (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createEntityWithHttpInfo(Entity body, String options) throws ApiException {
        com.squareup.okhttp.Call call = createEntityValidateBeforeCall(body, options, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * The payload is an object representing the entity to be created. The object follows the JSON entity Representation format (described in a \&quot;JSON Entity Representation\&quot; section). Response: * Successful operation uses 201 Created or 204 No Content (if upsert option is used). Response includes a &#x60;Location&#x60; header with the URL of the   created entity. * Errors use a non-2xx and (optionally) an error payload. See subsection on \&quot;Error Responses\&quot; for   more details.
     * @param body JSON Entity Representation (required)
     * @param options Options dictionary (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createEntityAsync(Entity body, String options, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createEntityValidateBeforeCall(body, options, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for listEntities
     * @param id A comma-separated list of elements. Retrieve entities whose ID matches one of the elements in the list. Incompatible with idPattern. (optional)
     * @param type comma-separated list of elements. Retrieve entities whose type matches one of the elements in the list. Incompatible with &#x60;typePattern&#x60;. (optional)
     * @param idPattern A correctly formated regular expression. Retrieve entities whose ID matches the regular expression. Incompatible with id. (optional)
     * @param typePattern A correctly formated regular expression. Retrieve entities whose type matches the regular expression. Incompatible with &#x60;type&#x60;. (optional)
     * @param q A query expression, composed of a list of statements separated by &#x60;;&#x60;, i.e., q&#x3D;statement;statements;statement. See [Simple Query Language specification](#simple_query_language). (optional)
     * @param mq A query expression for attribute metadata, composed of a list of statements separated by &#x60;;&#x60;, i.e., mq&#x3D;statement1;statement2;statement3. See [Simple Query Language specification](#simple_query_language). (optional)
     * @param georel Spatial relationship between matching entities and a reference shape. See [Geographical Queries](#geographical_queries). (optional)
     * @param geometry Geografical area to which the query is restricted. See [Geographical Queries](#geographical_queries). (optional)
     * @param coords List of latitude-longitude pairs of coordinates separated by &#x60;;&#x60;. See [Geographical Queries](#geographical_queries). (optional)
     * @param limit Limits the number of entities to be retrieved (optional)
     * @param offset Establishes the offset from where entities are retrieved (optional)
     * @param attrs Comma-separated list of attribute names whose data are to be included in the response. The attributes are retrieved in the order specified by this parameter. If this parameter is not included, the attributes are retrieved in arbitrary order. (optional)
     * @param metadata A list of metadata names to include in the response. (optional)
     * @param orderBy Criteria for ordering results. See \&quot;Ordering Results\&quot; section for details. (optional)
     * @param options Options dictionary (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listEntitiesCall(String id, String type, String idPattern, String typePattern, String q, String mq, String georel, String geometry, String coords, Double limit, Double offset, String attrs, String metadata, String orderBy, String options, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/entities";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (id != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("id", id));
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("type", type));
        if (idPattern != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("idPattern", idPattern));
        if (typePattern != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("typePattern", typePattern));
        if (q != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("q", q));
        if (mq != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("mq", mq));
        if (georel != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("georel", georel));
        if (geometry != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("geometry", geometry));
        if (coords != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("coords", coords));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (attrs != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("attrs", attrs));
        if (metadata != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("metadata", metadata));
        if (orderBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orderBy", orderBy));
        if (options != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("options", options));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "fiware_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listEntitiesValidateBeforeCall(String id, String type, String idPattern, String typePattern, String q, String mq, String georel, String geometry, String coords, Double limit, Double offset, String attrs, String metadata, String orderBy, String options, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = listEntitiesCall(id, type, idPattern, typePattern, q, mq, georel, geometry, coords, limit, offset, attrs, metadata, orderBy, options, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Retrieves a list of entities that match different criteria by id, type, pattern matching (either id or type) and/or those which match a query or geographical query (see [Simple Query Language](#simple_query_language) and  [Geographical Queries](#geographical_queries)). A given entity has to match all the criteria to be retrieved (i.e., the criteria is combined in a logical AND way). Note that pattern matching query parameters are incompatible (i.e. mutually exclusive) with their corresponding exact matching parameters, i.e. &#x60;idPattern&#x60; with &#x60;id&#x60; and &#x60;typePattern&#x60; with &#x60;type&#x60;. The response payload is an array containing one object per matching entity. Each entity follows the JSON entity Representation format (described in \&quot;JSON Entity Representation\&quot; section).  Response code: * Successful operation uses 200 OK * Errors use a non-2xx and (optionally) an error payload. See subsection on \&quot;Error Responses\&quot; for   more details.
     * @param id A comma-separated list of elements. Retrieve entities whose ID matches one of the elements in the list. Incompatible with idPattern. (optional)
     * @param type comma-separated list of elements. Retrieve entities whose type matches one of the elements in the list. Incompatible with &#x60;typePattern&#x60;. (optional)
     * @param idPattern A correctly formated regular expression. Retrieve entities whose ID matches the regular expression. Incompatible with id. (optional)
     * @param typePattern A correctly formated regular expression. Retrieve entities whose type matches the regular expression. Incompatible with &#x60;type&#x60;. (optional)
     * @param q A query expression, composed of a list of statements separated by &#x60;;&#x60;, i.e., q&#x3D;statement;statements;statement. See [Simple Query Language specification](#simple_query_language). (optional)
     * @param mq A query expression for attribute metadata, composed of a list of statements separated by &#x60;;&#x60;, i.e., mq&#x3D;statement1;statement2;statement3. See [Simple Query Language specification](#simple_query_language). (optional)
     * @param georel Spatial relationship between matching entities and a reference shape. See [Geographical Queries](#geographical_queries). (optional)
     * @param geometry Geografical area to which the query is restricted. See [Geographical Queries](#geographical_queries). (optional)
     * @param coords List of latitude-longitude pairs of coordinates separated by &#x60;;&#x60;. See [Geographical Queries](#geographical_queries). (optional)
     * @param limit Limits the number of entities to be retrieved (optional)
     * @param offset Establishes the offset from where entities are retrieved (optional)
     * @param attrs Comma-separated list of attribute names whose data are to be included in the response. The attributes are retrieved in the order specified by this parameter. If this parameter is not included, the attributes are retrieved in arbitrary order. (optional)
     * @param metadata A list of metadata names to include in the response. (optional)
     * @param orderBy Criteria for ordering results. See \&quot;Ordering Results\&quot; section for details. (optional)
     * @param options Options dictionary (optional)
     * @return List&lt;Entity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Entity> listEntities(String id, String type, String idPattern, String typePattern, String q, String mq, String georel, String geometry, String coords, Double limit, Double offset, String attrs, String metadata, String orderBy, String options) throws ApiException {
        ApiResponse<List<Entity>> resp = listEntitiesWithHttpInfo(id, type, idPattern, typePattern, q, mq, georel, geometry, coords, limit, offset, attrs, metadata, orderBy, options);
        return resp.getData();
    }

    /**
     * 
     * Retrieves a list of entities that match different criteria by id, type, pattern matching (either id or type) and/or those which match a query or geographical query (see [Simple Query Language](#simple_query_language) and  [Geographical Queries](#geographical_queries)). A given entity has to match all the criteria to be retrieved (i.e., the criteria is combined in a logical AND way). Note that pattern matching query parameters are incompatible (i.e. mutually exclusive) with their corresponding exact matching parameters, i.e. &#x60;idPattern&#x60; with &#x60;id&#x60; and &#x60;typePattern&#x60; with &#x60;type&#x60;. The response payload is an array containing one object per matching entity. Each entity follows the JSON entity Representation format (described in \&quot;JSON Entity Representation\&quot; section).  Response code: * Successful operation uses 200 OK * Errors use a non-2xx and (optionally) an error payload. See subsection on \&quot;Error Responses\&quot; for   more details.
     * @param id A comma-separated list of elements. Retrieve entities whose ID matches one of the elements in the list. Incompatible with idPattern. (optional)
     * @param type comma-separated list of elements. Retrieve entities whose type matches one of the elements in the list. Incompatible with &#x60;typePattern&#x60;. (optional)
     * @param idPattern A correctly formated regular expression. Retrieve entities whose ID matches the regular expression. Incompatible with id. (optional)
     * @param typePattern A correctly formated regular expression. Retrieve entities whose type matches the regular expression. Incompatible with &#x60;type&#x60;. (optional)
     * @param q A query expression, composed of a list of statements separated by &#x60;;&#x60;, i.e., q&#x3D;statement;statements;statement. See [Simple Query Language specification](#simple_query_language). (optional)
     * @param mq A query expression for attribute metadata, composed of a list of statements separated by &#x60;;&#x60;, i.e., mq&#x3D;statement1;statement2;statement3. See [Simple Query Language specification](#simple_query_language). (optional)
     * @param georel Spatial relationship between matching entities and a reference shape. See [Geographical Queries](#geographical_queries). (optional)
     * @param geometry Geografical area to which the query is restricted. See [Geographical Queries](#geographical_queries). (optional)
     * @param coords List of latitude-longitude pairs of coordinates separated by &#x60;;&#x60;. See [Geographical Queries](#geographical_queries). (optional)
     * @param limit Limits the number of entities to be retrieved (optional)
     * @param offset Establishes the offset from where entities are retrieved (optional)
     * @param attrs Comma-separated list of attribute names whose data are to be included in the response. The attributes are retrieved in the order specified by this parameter. If this parameter is not included, the attributes are retrieved in arbitrary order. (optional)
     * @param metadata A list of metadata names to include in the response. (optional)
     * @param orderBy Criteria for ordering results. See \&quot;Ordering Results\&quot; section for details. (optional)
     * @param options Options dictionary (optional)
     * @return ApiResponse&lt;List&lt;Entity&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Entity>> listEntitiesWithHttpInfo(String id, String type, String idPattern, String typePattern, String q, String mq, String georel, String geometry, String coords, Double limit, Double offset, String attrs, String metadata, String orderBy, String options) throws ApiException {
        com.squareup.okhttp.Call call = listEntitiesValidateBeforeCall(id, type, idPattern, typePattern, q, mq, georel, geometry, coords, limit, offset, attrs, metadata, orderBy, options, null, null);
        Type localVarReturnType = new TypeToken<List<Entity>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves a list of entities that match different criteria by id, type, pattern matching (either id or type) and/or those which match a query or geographical query (see [Simple Query Language](#simple_query_language) and  [Geographical Queries](#geographical_queries)). A given entity has to match all the criteria to be retrieved (i.e., the criteria is combined in a logical AND way). Note that pattern matching query parameters are incompatible (i.e. mutually exclusive) with their corresponding exact matching parameters, i.e. &#x60;idPattern&#x60; with &#x60;id&#x60; and &#x60;typePattern&#x60; with &#x60;type&#x60;. The response payload is an array containing one object per matching entity. Each entity follows the JSON entity Representation format (described in \&quot;JSON Entity Representation\&quot; section).  Response code: * Successful operation uses 200 OK * Errors use a non-2xx and (optionally) an error payload. See subsection on \&quot;Error Responses\&quot; for   more details.
     * @param id A comma-separated list of elements. Retrieve entities whose ID matches one of the elements in the list. Incompatible with idPattern. (optional)
     * @param type comma-separated list of elements. Retrieve entities whose type matches one of the elements in the list. Incompatible with &#x60;typePattern&#x60;. (optional)
     * @param idPattern A correctly formated regular expression. Retrieve entities whose ID matches the regular expression. Incompatible with id. (optional)
     * @param typePattern A correctly formated regular expression. Retrieve entities whose type matches the regular expression. Incompatible with &#x60;type&#x60;. (optional)
     * @param q A query expression, composed of a list of statements separated by &#x60;;&#x60;, i.e., q&#x3D;statement;statements;statement. See [Simple Query Language specification](#simple_query_language). (optional)
     * @param mq A query expression for attribute metadata, composed of a list of statements separated by &#x60;;&#x60;, i.e., mq&#x3D;statement1;statement2;statement3. See [Simple Query Language specification](#simple_query_language). (optional)
     * @param georel Spatial relationship between matching entities and a reference shape. See [Geographical Queries](#geographical_queries). (optional)
     * @param geometry Geografical area to which the query is restricted. See [Geographical Queries](#geographical_queries). (optional)
     * @param coords List of latitude-longitude pairs of coordinates separated by &#x60;;&#x60;. See [Geographical Queries](#geographical_queries). (optional)
     * @param limit Limits the number of entities to be retrieved (optional)
     * @param offset Establishes the offset from where entities are retrieved (optional)
     * @param attrs Comma-separated list of attribute names whose data are to be included in the response. The attributes are retrieved in the order specified by this parameter. If this parameter is not included, the attributes are retrieved in arbitrary order. (optional)
     * @param metadata A list of metadata names to include in the response. (optional)
     * @param orderBy Criteria for ordering results. See \&quot;Ordering Results\&quot; section for details. (optional)
     * @param options Options dictionary (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listEntitiesAsync(String id, String type, String idPattern, String typePattern, String q, String mq, String georel, String geometry, String coords, Double limit, Double offset, String attrs, String metadata, String orderBy, String options, final ApiCallback<List<Entity>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listEntitiesValidateBeforeCall(id, type, idPattern, typePattern, q, mq, georel, geometry, coords, limit, offset, attrs, metadata, orderBy, options, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Entity>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for removeEntity
     * @param entityId Id of the entity to be deleted (required)
     * @param type Entity type, to avoid ambiguity in the case there are several entities with the same entity id. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call removeEntityCall(String entityId, String type, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/entities/{entityId}"
            .replaceAll("\\{" + "entityId" + "\\}", apiClient.escapeString(entityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("type", type));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "fiware_token" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call removeEntityValidateBeforeCall(String entityId, String type, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'entityId' is set
        if (entityId == null) {
            throw new ApiException("Missing the required parameter 'entityId' when calling removeEntity(Async)");
        }
        

        com.squareup.okhttp.Call call = removeEntityCall(entityId, type, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Delete the entity. Response: * Successful operation uses 204 No Content * Errors use a non-2xx and (optionally) an error payload. See subsection on \&quot;Error Responses\&quot; for   more details.
     * @param entityId Id of the entity to be deleted (required)
     * @param type Entity type, to avoid ambiguity in the case there are several entities with the same entity id. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void removeEntity(String entityId, String type) throws ApiException {
        removeEntityWithHttpInfo(entityId, type);
    }

    /**
     * 
     * Delete the entity. Response: * Successful operation uses 204 No Content * Errors use a non-2xx and (optionally) an error payload. See subsection on \&quot;Error Responses\&quot; for   more details.
     * @param entityId Id of the entity to be deleted (required)
     * @param type Entity type, to avoid ambiguity in the case there are several entities with the same entity id. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> removeEntityWithHttpInfo(String entityId, String type) throws ApiException {
        com.squareup.okhttp.Call call = removeEntityValidateBeforeCall(entityId, type, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Delete the entity. Response: * Successful operation uses 204 No Content * Errors use a non-2xx and (optionally) an error payload. See subsection on \&quot;Error Responses\&quot; for   more details.
     * @param entityId Id of the entity to be deleted (required)
     * @param type Entity type, to avoid ambiguity in the case there are several entities with the same entity id. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call removeEntityAsync(String entityId, String type, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = removeEntityValidateBeforeCall(entityId, type, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for replaceAllEntityAttributes
     * @param entityId Id of the entity in question. (required)
     * @param body JSON Attribute Representation (required)
     * @param type Entity type, to avoid ambiguity in the case there are several entities with the same entity id. (optional)
     * @param options Operations options (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call replaceAllEntityAttributesCall(String entityId, Attribute body, String type, String options, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/entities/{entityId}/attrs"
            .replaceAll("\\{" + "entityId" + "\\}", apiClient.escapeString(entityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("type", type));
        if (options != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("options", options));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "fiware_token" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call replaceAllEntityAttributesValidateBeforeCall(String entityId, Attribute body, String type, String options, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'entityId' is set
        if (entityId == null) {
            throw new ApiException("Missing the required parameter 'entityId' when calling replaceAllEntityAttributes(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling replaceAllEntityAttributes(Async)");
        }
        

        com.squareup.okhttp.Call call = replaceAllEntityAttributesCall(entityId, body, type, options, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * The request payload is an object representing the new entity attributes. The object follows the JSON entity Representation format (described in a \&quot;JSON Entity Representation\&quot; above), except that &#x60;id&#x60; and &#x60;type&#x60; are not allowed. The attributes previously existing in the entity are removed and replaced by the ones in the request. Response: * Successful operation uses 204 No Content * Errors use a non-2xx and (optionally) an error payload. See subsection on \&quot;Error Responses\&quot; for   more details.
     * @param entityId Id of the entity in question. (required)
     * @param body JSON Attribute Representation (required)
     * @param type Entity type, to avoid ambiguity in the case there are several entities with the same entity id. (optional)
     * @param options Operations options (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void replaceAllEntityAttributes(String entityId, Attribute body, String type, String options) throws ApiException {
        replaceAllEntityAttributesWithHttpInfo(entityId, body, type, options);
    }

    /**
     * 
     * The request payload is an object representing the new entity attributes. The object follows the JSON entity Representation format (described in a \&quot;JSON Entity Representation\&quot; above), except that &#x60;id&#x60; and &#x60;type&#x60; are not allowed. The attributes previously existing in the entity are removed and replaced by the ones in the request. Response: * Successful operation uses 204 No Content * Errors use a non-2xx and (optionally) an error payload. See subsection on \&quot;Error Responses\&quot; for   more details.
     * @param entityId Id of the entity in question. (required)
     * @param body JSON Attribute Representation (required)
     * @param type Entity type, to avoid ambiguity in the case there are several entities with the same entity id. (optional)
     * @param options Operations options (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> replaceAllEntityAttributesWithHttpInfo(String entityId, Attribute body, String type, String options) throws ApiException {
        com.squareup.okhttp.Call call = replaceAllEntityAttributesValidateBeforeCall(entityId, body, type, options, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * The request payload is an object representing the new entity attributes. The object follows the JSON entity Representation format (described in a \&quot;JSON Entity Representation\&quot; above), except that &#x60;id&#x60; and &#x60;type&#x60; are not allowed. The attributes previously existing in the entity are removed and replaced by the ones in the request. Response: * Successful operation uses 204 No Content * Errors use a non-2xx and (optionally) an error payload. See subsection on \&quot;Error Responses\&quot; for   more details.
     * @param entityId Id of the entity in question. (required)
     * @param body JSON Attribute Representation (required)
     * @param type Entity type, to avoid ambiguity in the case there are several entities with the same entity id. (optional)
     * @param options Operations options (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call replaceAllEntityAttributesAsync(String entityId, Attribute body, String type, String options, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = replaceAllEntityAttributesValidateBeforeCall(entityId, body, type, options, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for retrieveEntity
     * @param entityId Id of the entity to be retrieved (required)
     * @param type Entity type, to avoid ambiguity in case there are several entities with the same entity id. (optional)
     * @param attrs Comma-separated list of attribute names whose data must be included in the response. The attributes are retrieved in the order specified by this parameter. If this parameter is not included, the attributes are retrieved in arbitrary order, and all the attributes of the entity are included in the response. (optional)
     * @param metadata A list of metadata names to include in the response. See \&quot;Filtering out attributes and metadata\&quot; section for more detail. (optional)
     * @param options Options dictionary (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveEntityCall(String entityId, String type, String attrs, String metadata, String options, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/entities/{entityId}"
            .replaceAll("\\{" + "entityId" + "\\}", apiClient.escapeString(entityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("type", type));
        if (attrs != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("attrs", attrs));
        if (metadata != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("metadata", metadata));
        if (options != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("options", options));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "fiware_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveEntityValidateBeforeCall(String entityId, String type, String attrs, String metadata, String options, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'entityId' is set
        if (entityId == null) {
            throw new ApiException("Missing the required parameter 'entityId' when calling retrieveEntity(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveEntityCall(entityId, type, attrs, metadata, options, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * The response is an object representing the entity identified by the ID. The object follows the JSON entity Representation format (described in \&quot;JSON Entity Representation\&quot; section). This operation must return one entity element only, but there may be more than one entity with the same ID (e.g. entities with same ID but different types). In such case, an error message is returned, with the HTTP status code set to 409 Conflict. Response: * Successful operation uses 200 OK * Errors use a non-2xx and (optionally) an error payload. See subsection on \&quot;Error Responses\&quot; for more details.
     * @param entityId Id of the entity to be retrieved (required)
     * @param type Entity type, to avoid ambiguity in case there are several entities with the same entity id. (optional)
     * @param attrs Comma-separated list of attribute names whose data must be included in the response. The attributes are retrieved in the order specified by this parameter. If this parameter is not included, the attributes are retrieved in arbitrary order, and all the attributes of the entity are included in the response. (optional)
     * @param metadata A list of metadata names to include in the response. See \&quot;Filtering out attributes and metadata\&quot; section for more detail. (optional)
     * @param options Options dictionary (optional)
     * @return Entity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Entity retrieveEntity(String entityId, String type, String attrs, String metadata, String options) throws ApiException {
        ApiResponse<Entity> resp = retrieveEntityWithHttpInfo(entityId, type, attrs, metadata, options);
        return resp.getData();
    }

    /**
     * 
     * The response is an object representing the entity identified by the ID. The object follows the JSON entity Representation format (described in \&quot;JSON Entity Representation\&quot; section). This operation must return one entity element only, but there may be more than one entity with the same ID (e.g. entities with same ID but different types). In such case, an error message is returned, with the HTTP status code set to 409 Conflict. Response: * Successful operation uses 200 OK * Errors use a non-2xx and (optionally) an error payload. See subsection on \&quot;Error Responses\&quot; for more details.
     * @param entityId Id of the entity to be retrieved (required)
     * @param type Entity type, to avoid ambiguity in case there are several entities with the same entity id. (optional)
     * @param attrs Comma-separated list of attribute names whose data must be included in the response. The attributes are retrieved in the order specified by this parameter. If this parameter is not included, the attributes are retrieved in arbitrary order, and all the attributes of the entity are included in the response. (optional)
     * @param metadata A list of metadata names to include in the response. See \&quot;Filtering out attributes and metadata\&quot; section for more detail. (optional)
     * @param options Options dictionary (optional)
     * @return ApiResponse&lt;Entity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Entity> retrieveEntityWithHttpInfo(String entityId, String type, String attrs, String metadata, String options) throws ApiException {
        com.squareup.okhttp.Call call = retrieveEntityValidateBeforeCall(entityId, type, attrs, metadata, options, null, null);
        Type localVarReturnType = new TypeToken<Entity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * The response is an object representing the entity identified by the ID. The object follows the JSON entity Representation format (described in \&quot;JSON Entity Representation\&quot; section). This operation must return one entity element only, but there may be more than one entity with the same ID (e.g. entities with same ID but different types). In such case, an error message is returned, with the HTTP status code set to 409 Conflict. Response: * Successful operation uses 200 OK * Errors use a non-2xx and (optionally) an error payload. See subsection on \&quot;Error Responses\&quot; for more details.
     * @param entityId Id of the entity to be retrieved (required)
     * @param type Entity type, to avoid ambiguity in case there are several entities with the same entity id. (optional)
     * @param attrs Comma-separated list of attribute names whose data must be included in the response. The attributes are retrieved in the order specified by this parameter. If this parameter is not included, the attributes are retrieved in arbitrary order, and all the attributes of the entity are included in the response. (optional)
     * @param metadata A list of metadata names to include in the response. See \&quot;Filtering out attributes and metadata\&quot; section for more detail. (optional)
     * @param options Options dictionary (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveEntityAsync(String entityId, String type, String attrs, String metadata, String options, final ApiCallback<Entity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveEntityValidateBeforeCall(entityId, type, attrs, metadata, options, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Entity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveEntityAttributes
     * @param entityId Id of the entity to be retrieved (required)
     * @param type Entity type, to avoid ambiguity in the case there are several entities with the same entity id. (optional)
     * @param attrs Comma-separated list of attribute names whose data are to be included in the response. The attributes are retrieved in the order specified by this parameter. If this parameter is not included, the attributes are retrieved in arbitrary order, and all the attributes of the entity are included in the response. (optional)
     * @param metadata A list of metadata names to include in the response. See \&quot;Filtering out attributes and metadata\&quot; section for more detail. (optional)
     * @param options Options dictionary (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveEntityAttributesCall(String entityId, String type, String attrs, String metadata, String options, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/entities/{entityId}/attrs"
            .replaceAll("\\{" + "entityId" + "\\}", apiClient.escapeString(entityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("type", type));
        if (attrs != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("attrs", attrs));
        if (metadata != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("metadata", metadata));
        if (options != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("options", options));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "fiware_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveEntityAttributesValidateBeforeCall(String entityId, String type, String attrs, String metadata, String options, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'entityId' is set
        if (entityId == null) {
            throw new ApiException("Missing the required parameter 'entityId' when calling retrieveEntityAttributes(Async)");
        }
        

        com.squareup.okhttp.Call call = retrieveEntityAttributesCall(entityId, type, attrs, metadata, options, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * This request is similar to retreiving the whole entity, however this one omits the &#x60;id&#x60; and &#x60;type&#x60; fields. Just like the general request of getting an entire entity, this operation must return only one entity element. If more than one entity with the same ID is found (e.g. entities with same ID but different type), an error message is returned, with the HTTP status code set to 409 Conflict. Response: * Successful operation uses 200 OK * Errors use a non-2xx and (optionally) an error payload. See subsection on \&quot;Error Responses\&quot; for   more details.
     * @param entityId Id of the entity to be retrieved (required)
     * @param type Entity type, to avoid ambiguity in the case there are several entities with the same entity id. (optional)
     * @param attrs Comma-separated list of attribute names whose data are to be included in the response. The attributes are retrieved in the order specified by this parameter. If this parameter is not included, the attributes are retrieved in arbitrary order, and all the attributes of the entity are included in the response. (optional)
     * @param metadata A list of metadata names to include in the response. See \&quot;Filtering out attributes and metadata\&quot; section for more detail. (optional)
     * @param options Options dictionary (optional)
     * @return Attribute
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Attribute retrieveEntityAttributes(String entityId, String type, String attrs, String metadata, String options) throws ApiException {
        ApiResponse<Attribute> resp = retrieveEntityAttributesWithHttpInfo(entityId, type, attrs, metadata, options);
        return resp.getData();
    }

    /**
     * 
     * This request is similar to retreiving the whole entity, however this one omits the &#x60;id&#x60; and &#x60;type&#x60; fields. Just like the general request of getting an entire entity, this operation must return only one entity element. If more than one entity with the same ID is found (e.g. entities with same ID but different type), an error message is returned, with the HTTP status code set to 409 Conflict. Response: * Successful operation uses 200 OK * Errors use a non-2xx and (optionally) an error payload. See subsection on \&quot;Error Responses\&quot; for   more details.
     * @param entityId Id of the entity to be retrieved (required)
     * @param type Entity type, to avoid ambiguity in the case there are several entities with the same entity id. (optional)
     * @param attrs Comma-separated list of attribute names whose data are to be included in the response. The attributes are retrieved in the order specified by this parameter. If this parameter is not included, the attributes are retrieved in arbitrary order, and all the attributes of the entity are included in the response. (optional)
     * @param metadata A list of metadata names to include in the response. See \&quot;Filtering out attributes and metadata\&quot; section for more detail. (optional)
     * @param options Options dictionary (optional)
     * @return ApiResponse&lt;Attribute&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Attribute> retrieveEntityAttributesWithHttpInfo(String entityId, String type, String attrs, String metadata, String options) throws ApiException {
        com.squareup.okhttp.Call call = retrieveEntityAttributesValidateBeforeCall(entityId, type, attrs, metadata, options, null, null);
        Type localVarReturnType = new TypeToken<Attribute>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This request is similar to retreiving the whole entity, however this one omits the &#x60;id&#x60; and &#x60;type&#x60; fields. Just like the general request of getting an entire entity, this operation must return only one entity element. If more than one entity with the same ID is found (e.g. entities with same ID but different type), an error message is returned, with the HTTP status code set to 409 Conflict. Response: * Successful operation uses 200 OK * Errors use a non-2xx and (optionally) an error payload. See subsection on \&quot;Error Responses\&quot; for   more details.
     * @param entityId Id of the entity to be retrieved (required)
     * @param type Entity type, to avoid ambiguity in the case there are several entities with the same entity id. (optional)
     * @param attrs Comma-separated list of attribute names whose data are to be included in the response. The attributes are retrieved in the order specified by this parameter. If this parameter is not included, the attributes are retrieved in arbitrary order, and all the attributes of the entity are included in the response. (optional)
     * @param metadata A list of metadata names to include in the response. See \&quot;Filtering out attributes and metadata\&quot; section for more detail. (optional)
     * @param options Options dictionary (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveEntityAttributesAsync(String entityId, String type, String attrs, String metadata, String options, final ApiCallback<Attribute> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveEntityAttributesValidateBeforeCall(entityId, type, attrs, metadata, options, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Attribute>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateExistingEntityAttributes
     * @param entityId Id of the entity to be updated (required)
     * @param body JSON Attribute Representation (required)
     * @param type Entity type, to avoid ambiguity in case there are several entities with the same entity id. (optional)
     * @param options Operations options (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateExistingEntityAttributesCall(String entityId, Attribute body, String type, String options, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/entities/{entityId}/attrs"
            .replaceAll("\\{" + "entityId" + "\\}", apiClient.escapeString(entityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("type", type));
        if (options != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("options", options));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "fiware_token" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateExistingEntityAttributesValidateBeforeCall(String entityId, Attribute body, String type, String options, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'entityId' is set
        if (entityId == null) {
            throw new ApiException("Missing the required parameter 'entityId' when calling updateExistingEntityAttributes(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateExistingEntityAttributes(Async)");
        }
        

        com.squareup.okhttp.Call call = updateExistingEntityAttributesCall(entityId, body, type, options, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * The request payload is an object representing the attributes to update. The object follows the JSON entity Representation format (described in \&quot;JSON Entity Representation\&quot; section), except that &#x60;id&#x60; and &#x60;type&#x60; are not allowed. The entity attributes are updated with the ones in the payload. In addition to that, if one or more attributes in the payload doesn&#39;t exist in the entity, an error is returned. Response: * Successful operation uses 204 No Content * Errors use a non-2xx and (optionally) an error payload. See subsection on \&quot;Error Responses\&quot; for   more details.
     * @param entityId Id of the entity to be updated (required)
     * @param body JSON Attribute Representation (required)
     * @param type Entity type, to avoid ambiguity in case there are several entities with the same entity id. (optional)
     * @param options Operations options (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateExistingEntityAttributes(String entityId, Attribute body, String type, String options) throws ApiException {
        updateExistingEntityAttributesWithHttpInfo(entityId, body, type, options);
    }

    /**
     * 
     * The request payload is an object representing the attributes to update. The object follows the JSON entity Representation format (described in \&quot;JSON Entity Representation\&quot; section), except that &#x60;id&#x60; and &#x60;type&#x60; are not allowed. The entity attributes are updated with the ones in the payload. In addition to that, if one or more attributes in the payload doesn&#39;t exist in the entity, an error is returned. Response: * Successful operation uses 204 No Content * Errors use a non-2xx and (optionally) an error payload. See subsection on \&quot;Error Responses\&quot; for   more details.
     * @param entityId Id of the entity to be updated (required)
     * @param body JSON Attribute Representation (required)
     * @param type Entity type, to avoid ambiguity in case there are several entities with the same entity id. (optional)
     * @param options Operations options (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateExistingEntityAttributesWithHttpInfo(String entityId, Attribute body, String type, String options) throws ApiException {
        com.squareup.okhttp.Call call = updateExistingEntityAttributesValidateBeforeCall(entityId, body, type, options, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * The request payload is an object representing the attributes to update. The object follows the JSON entity Representation format (described in \&quot;JSON Entity Representation\&quot; section), except that &#x60;id&#x60; and &#x60;type&#x60; are not allowed. The entity attributes are updated with the ones in the payload. In addition to that, if one or more attributes in the payload doesn&#39;t exist in the entity, an error is returned. Response: * Successful operation uses 204 No Content * Errors use a non-2xx and (optionally) an error payload. See subsection on \&quot;Error Responses\&quot; for   more details.
     * @param entityId Id of the entity to be updated (required)
     * @param body JSON Attribute Representation (required)
     * @param type Entity type, to avoid ambiguity in case there are several entities with the same entity id. (optional)
     * @param options Operations options (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateExistingEntityAttributesAsync(String entityId, Attribute body, String type, String options, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateExistingEntityAttributesValidateBeforeCall(entityId, body, type, options, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateOrAppendEntityAttributes
     * @param entityId Entity id to be updated (required)
     * @param body JSON Attribute Representation (required)
     * @param type Entity type, to avoid ambiguity in case there are several entities with the same entity id. (optional)
     * @param options Operations options (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateOrAppendEntityAttributesCall(String entityId, Attribute body, String type, String options, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/entities/{entityId}/attrs"
            .replaceAll("\\{" + "entityId" + "\\}", apiClient.escapeString(entityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("type", type));
        if (options != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("options", options));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "fiware_token" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateOrAppendEntityAttributesValidateBeforeCall(String entityId, Attribute body, String type, String options, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'entityId' is set
        if (entityId == null) {
            throw new ApiException("Missing the required parameter 'entityId' when calling updateOrAppendEntityAttributes(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateOrAppendEntityAttributes(Async)");
        }
        

        com.squareup.okhttp.Call call = updateOrAppendEntityAttributesCall(entityId, body, type, options, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * The request payload is an object representing the attributes to append or update. The object follows the JSON entity Representation format (described in \&quot;JSON Entity Representation\&quot; section), except that &#x60;id&#x60; and &#x60;type&#x60; are not allowed. The entity attributes are updated with the ones in the payload, depending on whether the &#x60;append&#x60; operation option is used or not. * If &#x60;append&#x60; is not used: the entity attributes are updated (if they previously exist) or appended   (if they don&#39;t previously exist) with the ones in the payload. * If &#x60;append&#x60; is used (i.e. strict append semantics): all the attributes in the payload not   previously existing in the entity are appended. In addition to that, in case some of the   attributes in the payload already exist in the entity, an error is returned.    Response: * Successful operation uses 204 No Content * Errors use a non-2xx and (optionally) an error payload. See subsection on \&quot;Error Responses\&quot; for   more details.
     * @param entityId Entity id to be updated (required)
     * @param body JSON Attribute Representation (required)
     * @param type Entity type, to avoid ambiguity in case there are several entities with the same entity id. (optional)
     * @param options Operations options (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateOrAppendEntityAttributes(String entityId, Attribute body, String type, String options) throws ApiException {
        updateOrAppendEntityAttributesWithHttpInfo(entityId, body, type, options);
    }

    /**
     * 
     * The request payload is an object representing the attributes to append or update. The object follows the JSON entity Representation format (described in \&quot;JSON Entity Representation\&quot; section), except that &#x60;id&#x60; and &#x60;type&#x60; are not allowed. The entity attributes are updated with the ones in the payload, depending on whether the &#x60;append&#x60; operation option is used or not. * If &#x60;append&#x60; is not used: the entity attributes are updated (if they previously exist) or appended   (if they don&#39;t previously exist) with the ones in the payload. * If &#x60;append&#x60; is used (i.e. strict append semantics): all the attributes in the payload not   previously existing in the entity are appended. In addition to that, in case some of the   attributes in the payload already exist in the entity, an error is returned.    Response: * Successful operation uses 204 No Content * Errors use a non-2xx and (optionally) an error payload. See subsection on \&quot;Error Responses\&quot; for   more details.
     * @param entityId Entity id to be updated (required)
     * @param body JSON Attribute Representation (required)
     * @param type Entity type, to avoid ambiguity in case there are several entities with the same entity id. (optional)
     * @param options Operations options (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateOrAppendEntityAttributesWithHttpInfo(String entityId, Attribute body, String type, String options) throws ApiException {
        com.squareup.okhttp.Call call = updateOrAppendEntityAttributesValidateBeforeCall(entityId, body, type, options, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * The request payload is an object representing the attributes to append or update. The object follows the JSON entity Representation format (described in \&quot;JSON Entity Representation\&quot; section), except that &#x60;id&#x60; and &#x60;type&#x60; are not allowed. The entity attributes are updated with the ones in the payload, depending on whether the &#x60;append&#x60; operation option is used or not. * If &#x60;append&#x60; is not used: the entity attributes are updated (if they previously exist) or appended   (if they don&#39;t previously exist) with the ones in the payload. * If &#x60;append&#x60; is used (i.e. strict append semantics): all the attributes in the payload not   previously existing in the entity are appended. In addition to that, in case some of the   attributes in the payload already exist in the entity, an error is returned.    Response: * Successful operation uses 204 No Content * Errors use a non-2xx and (optionally) an error payload. See subsection on \&quot;Error Responses\&quot; for   more details.
     * @param entityId Entity id to be updated (required)
     * @param body JSON Attribute Representation (required)
     * @param type Entity type, to avoid ambiguity in case there are several entities with the same entity id. (optional)
     * @param options Operations options (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateOrAppendEntityAttributesAsync(String entityId, Attribute body, String type, String options, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateOrAppendEntityAttributesValidateBeforeCall(entityId, body, type, options, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
