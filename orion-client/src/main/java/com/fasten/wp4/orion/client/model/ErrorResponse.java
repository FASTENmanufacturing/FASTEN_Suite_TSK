/*
 * ngsi-v2
 * NGSI V2 API RC-2018.04
 *
 * OpenAPI spec version: v2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.fasten.wp4.orion.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.io.Serializable;

/**
 * All NGSIv2 server implementations must use the following HTTP response codes and error texts. However, the particular text used for description field is an implementation specific aspect. Error list (HTTP response code in parenthesis): * &#x60;ParseError&#x60; (400). The incoming JSON payload cannot be parsed. * &#x60;BadRequest&#x60; (400). The incoming request is invalid in this context. * &#x60;NotFound&#x60; (404). The resource (entity, subscription, etc.) referred in the request has not been found. * &#x60;TooManyResults&#x60; (409). There are several results that match with the resource identification used in the request. * &#x60;ContentLengthRequired&#x60; (411). Zero/No Content-Length in PUT/POST/PATCH request. * &#x60;RequestEntityTooLarge&#x60; (413). Payload is too large. * &#x60;UnsupportedMediaType&#x60; (415). Request content type is not supported. * &#x60;InvalidModification&#x60; (422). Some piece of information is missing in payload. * &#x60;NotSupportedQuery&#x60; (422). The implementation does not support the query issued. * &#x60;NoResourcesAvailable&#x60; (413). There are no server resources to fulfill the client request. New error codes may be defined in new iterations of this specificatio.
 */
@ApiModel(description = "All NGSIv2 server implementations must use the following HTTP response codes and error texts. However, the particular text used for description field is an implementation specific aspect. Error list (HTTP response code in parenthesis): * `ParseError` (400). The incoming JSON payload cannot be parsed. * `BadRequest` (400). The incoming request is invalid in this context. * `NotFound` (404). The resource (entity, subscription, etc.) referred in the request has not been found. * `TooManyResults` (409). There are several results that match with the resource identification used in the request. * `ContentLengthRequired` (411). Zero/No Content-Length in PUT/POST/PATCH request. * `RequestEntityTooLarge` (413). Payload is too large. * `UnsupportedMediaType` (415). Request content type is not supported. * `InvalidModification` (422). Some piece of information is missing in payload. * `NotSupportedQuery` (422). The implementation does not support the query issued. * `NoResourcesAvailable` (413). There are no server resources to fulfill the client request. New error codes may be defined in new iterations of this specificatio.")

public class ErrorResponse implements Serializable {
  private static final long serialVersionUID = 1L;

  @SerializedName("error")
  private String error = null;

  @SerializedName("description")
  private String description = null;

  public ErrorResponse error(String error) {
    this.error = error;
    return this;
  }

   /**
   * Get error
   * @return error
  **/
  @ApiModelProperty(required = true, value = "")
  public String getError() {
    return error;
  }

  public void setError(String error) {
    this.error = error;
  }

  public ErrorResponse description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @ApiModelProperty(value = "")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ErrorResponse errorResponse = (ErrorResponse) o;
    return Objects.equals(this.error, errorResponse.error) &&
        Objects.equals(this.description, errorResponse.description);
  }

  @Override
  public int hashCode() {
    return Objects.hash(error, description);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ErrorResponse {\n");
    
    sb.append("    error: ").append(toIndentedString(error)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

